
AVRASM ver. 2.1.30  D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm Sat Nov 23 17:46:53 2024

D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1095): warning: Register r12 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1097): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Key=R5
                 	.DEF _State=R4
                 	.DEF _Operand=R7
                 	.DEF _Num0=R8
                 	.DEF _Num0_msb=R9
                 	.DEF _Num1=R10
                 	.DEF _Num1_msb=R11
                 	.DEF _Result=R12
                 	.DEF _Result_msb=R13
                 	.DEF __lcd_x=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0065 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000037 fdfe
000038 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
000039 3231
00003a 2f33
00003b 3534
00003c 2a36      	.DB  0x31,0x32,0x33,0x2F,0x34,0x35,0x36,0x2A
00003d 3837
00003e 2d39
00003f 3043
000040 2b3d      	.DB  0x37,0x38,0x39,0x2D,0x43,0x30,0x3D,0x2B
                 _0x0:
000041 7453
000042 7261
000043 0074
000044 6425      	.DB  0x53,0x74,0x61,0x72,0x74,0x0,0x25,0x64
000045 4e00
000046 6e61
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1146): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0,0x4E,0x61,0x6E,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 _0x20A0060:
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1150): warning: .cseg .db misalignment - padding zero byte
000049 0001      	.DB  0x1
                 _0x20A0000:
00004a 4e2d
00004b 4e41
00004c 4900
00004d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Github\Assembly-Lab\CodeVision\Session4_3(power)\Debug\List\4.asm(1153): warning: .cseg .db misalignment - padding zero byte
00004e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004f 0008      	.DW  0x08
000050 0004      	.DW  0x04
000051 0066      	.DW  __REG_VARS*2
                 
000052 0004      	.DW  0x04
000053 026a      	.DW  _scan
000054 006e      	.DW  _0x3*2
                 
000055 0010      	.DW  0x10
000056 0288      	.DW  _arrkey
000057 0072      	.DW  _0x4*2
                 
000058 0006      	.DW  0x06
000059 0260      	.DW  _0x1F
00005a 0082      	.DW  _0x0*2
                 
00005b 0004      	.DW  0x04
00005c 0266      	.DW  _0x1F+6
00005d 008b      	.DW  _0x0*2+9
                 
00005e 0002      	.DW  0x02
00005f 0298      	.DW  __base_y_G100
000060 0090      	.DW  _0x2000003*2
                 
000061 0001      	.DW  0x01
000062 029e      	.DW  __seed_G105
000063 0092      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000064 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000065 94f8      	CLI
000066 27ee      	CLR  R30
000067 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000068 e0f1      	LDI  R31,1
000069 bffb      	OUT  GICR,R31
00006a bfeb      	OUT  GICR,R30
00006b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006c e08d      	LDI  R24,(14-2)+1
00006d e0a2      	LDI  R26,2
00006e 27bb      	CLR  R27
                 __CLEAR_REG:
00006f 93ed      	ST   X+,R30
000070 958a      	DEC  R24
000071 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000072 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000073 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000074 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008b bfed      	OUT  SPL,R30
00008c e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008f e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000090 940c 00ea 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * 4.c
                 ; *
                 ; * Created: 11/3/2024 1:44:56 PM
                 ; * Author: omidt
                 ; */
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <math.h>
                 ;unsigned char scan[4]={0XFE,0XFD,0XFB,0XF7};
                 
                 	.DSEG
                 ;char Key, State=0, Operand;
                 ;char Buf1[5], Buf0[5],Buf[16];
                 ;int Num0=0, Num1=0, Result;
                 ;char arrkey[16]=
                 ;{
                 ; '1','2','3','/',
                 ; '4','5','6','*',
                 ; '7','8','9','-',
                 ; 'C','0','=','+'
                 ;};
                 ;
                 ;#define c1 PINB.4
                 ;#define c2 PINB.5
                 ;#define c3 PINB.6
                 ;#define c4 PINB.7
                 ;#define keypad_port PORTB
                 ;
                 ;
                 ;int power(int a, int b)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _power:
                 ; .FSTART _power
                 ; 0000 0022     int i;
                 ; 0000 0023     int result = 1;
                 ; 0000 0024     for(i = 1; i <=b; i++)
000092 93ba      	ST   -Y,R27
000093 93aa      	ST   -Y,R26
000094 940e 04d7 	CALL __SAVELOCR4
                 ;	a -> Y+6
                 ;	b -> Y+4
                 ;	i -> R16,R17
                 ;	result -> R18,R19
                +
000096 e021     +LDI R18 , LOW ( 1 )
000097 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                +
000098 e001     +LDI R16 , LOW ( 1 )
000099 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x6:
00009a 81ec      	LDD  R30,Y+4
00009b 81fd      	LDD  R31,Y+4+1
00009c 17e0      	CP   R30,R16
00009d 07f1      	CPC  R31,R17
00009e f04c      	BRLT _0x7
                 ; 0000 0025     {
                 ; 0000 0026         result *= a;
00009f 81ee      	LDD  R30,Y+6
0000a0 81ff      	LDD  R31,Y+6+1
0000a1 01d9      	MOVW R26,R18
0000a2 940e 04b5 	CALL __MULW12
0000a4 019f      	MOVW R18,R30
                 ; 0000 0027     }
                +
0000a5 5f0f     +SUBI R16 , LOW ( - 1 )
0000a6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000a7 cff2      	RJMP _0x6
                 _0x7:
                 ; 0000 0028     return result;
0000a8 01f9      	MOVW R30,R18
0000a9 940e 04de 	CALL __LOADLOCR4
0000ab 9628      	ADIW R28,8
0000ac 9508      	RET
                 ; 0000 0029 
                 ; 0000 002A }
                 ; .FEND
                 ;
                 ;char keypad(){
                 ; 0000 002C char keypad(){
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 002D     unsigned char r,c,k;
                 ; 0000 002E     DDRB=0X0F;
0000ad 940e 04d7 	CALL __SAVELOCR4
                 ;	r -> R17
                 ;	c -> R16
                 ;	k -> R19
0000af e0ef      	LDI  R30,LOW(15)
0000b0 bbe7      	OUT  0x17,R30
                 ; 0000 002F     keypad_port=0XFF;
0000b1 efef      	LDI  R30,LOW(255)
0000b2 bbe8      	OUT  0x18,R30
                 ; 0000 0030     while(1){
                 _0x8:
                 ; 0000 0031         for (r=0; r<4; r++){
0000b3 e010      	LDI  R17,LOW(0)
                 _0xC:
0000b4 3014      	CPI  R17,4
0000b5 f578      	BRSH _0xD
                 ; 0000 0032             c=255;
0000b6 ef0f      	LDI  R16,LOW(255)
                 ; 0000 0033             keypad_port=scan[r];
0000b7 2fe1      	MOV  R30,R17
0000b8 e0f0      	LDI  R31,0
0000b9 59e6      	SUBI R30,LOW(-_scan)
0000ba 4ffd      	SBCI R31,HIGH(-_scan)
0000bb 81e0      	LD   R30,Z
0000bc bbe8      	OUT  0x18,R30
                 ; 0000 0034             delay_us(10);
                +
0000bd e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000be 958a     +DEC R24
0000bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0035             if(c1==0) c=0; if(c2==0) c=1; if(c3==0) c=2; if(c4==0) c=3;
0000c0 9bb4      	SBIS 0x16,4
0000c1 e000      	LDI  R16,LOW(0)
0000c2 9bb5      	SBIS 0x16,5
0000c3 e001      	LDI  R16,LOW(1)
0000c4 9bb6      	SBIS 0x16,6
0000c5 e002      	LDI  R16,LOW(2)
0000c6 9bb7      	SBIS 0x16,7
0000c7 e003      	LDI  R16,LOW(3)
                 ; 0000 0036             if (c!=255){
0000c8 3f0f      	CPI  R16,255
0000c9 f0c9      	BREQ _0x12
                 ; 0000 0037                 k=arrkey[(r*4)+c];
0000ca e0e4      	LDI  R30,LOW(4)
0000cb 9fe1      	MUL  R30,R17
0000cc 01f0      	MOVW R30,R0
0000cd 01df      	MOVW R26,R30
0000ce 2fe0      	MOV  R30,R16
0000cf e0f0      	LDI  R31,0
0000d0 0fea      	ADD  R30,R26
0000d1 1ffb      	ADC  R31,R27
0000d2 57e8      	SUBI R30,LOW(-_arrkey)
0000d3 4ffd      	SBCI R31,HIGH(-_arrkey)
0000d4 8130      	LD   R19,Z
                 ; 0000 0038                 while(c1==0); while(c2==0); while(c3==0); while(c4==0);
                 _0x13:
0000d5 9bb4      	SBIS 0x16,4
0000d6 cffe      	RJMP _0x13
                 _0x16:
0000d7 9bb5      	SBIS 0x16,5
0000d8 cffe      	RJMP _0x16
                 _0x19:
0000d9 9bb6      	SBIS 0x16,6
0000da cffe      	RJMP _0x19
                 _0x1C:
0000db 9bb7      	SBIS 0x16,7
0000dc cffe      	RJMP _0x1C
                 ; 0000 0039                 delay_ms(50);
0000dd e3a2      	LDI  R26,LOW(50)
0000de e0b0      	LDI  R27,0
0000df 940e 0491 	CALL _delay_ms
                 ; 0000 003A                 return k;
0000e1 2fe3      	MOV  R30,R19
0000e2 c003      	RJMP _0x20C0003
                 ; 0000 003B             }
                 ; 0000 003C         }
                 _0x12:
0000e3 5f1f      	SUBI R17,-1
0000e4 cfcf      	RJMP _0xC
                 _0xD:
                 ; 0000 003D     }
0000e5 cfcd      	RJMP _0x8
                 ; 0000 003E }
                 _0x20C0003:
0000e6 940e 04de 	CALL __LOADLOCR4
0000e8 9624      	ADIW R28,4
0000e9 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0041 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0042     lcd_init(16);
0000ea e1a0      	LDI  R26,LOW(16)
0000eb d138      	RCALL _lcd_init
                 ; 0000 0043     lcd_clear();
0000ec d0ff      	RCALL _lcd_clear
                 ; 0000 0044     lcd_puts("Start");
                +
0000ed e6a0     +LDI R26 , LOW ( _0x1F + ( 0 ) )
0000ee e0b2     +LDI R27 , HIGH ( _0x1F + ( 0 ) )
                 	__POINTW2MN _0x1F,0
0000ef d123      	RCALL _lcd_puts
                 ; 0000 0045     delay_ms(1000);
0000f0 eea8      	LDI  R26,LOW(1000)
0000f1 e0b3      	LDI  R27,HIGH(1000)
0000f2 940e 0491 	CALL _delay_ms
                 ; 0000 0046     lcd_clear();
0000f4 d0f7      	RCALL _lcd_clear
                 ; 0000 0047     while (1)
                 _0x20:
                 ; 0000 0048     {
                 ; 0000 0049         Key=keypad();
0000f5 dfb7      	RCALL _keypad
0000f6 2e5e      	MOV  R5,R30
                 ; 0000 004A         switch (State)
0000f7 2de4      	MOV  R30,R4
0000f8 e0f0      	LDI  R31,0
                 ; 0000 004B         {
                 ; 0000 004C             case 0:
0000f9 9730      	SBIW R30,0
0000fa f559      	BRNE _0x26
                 ; 0000 004D             if (Key == 'C')
0000fb e4e3      	LDI  R30,LOW(67)
0000fc 15e5      	CP   R30,R5
0000fd f419      	BRNE _0x27
                 ; 0000 004E             {
                 ; 0000 004F                 Num0=0; Num1=0; Operand=''; lcd_clear(); lcd_putchar('0');
0000fe 940e 0413 	CALL SUBOPT_0x0
                 ; 0000 0050             }
                 ; 0000 0051             else if ((Key == '+') | (Key == '-') | (Key == '/') | (Key == '*'))
000100 c024      	RJMP _0x28
                 _0x27:
000101 2da5      	MOV  R26,R5
000102 e2eb      	LDI  R30,LOW(43)
000103 940e 04a8 	CALL __EQB12
000105 2e0e      	MOV  R0,R30
000106 e2ed      	LDI  R30,LOW(45)
000107 940e 041d 	CALL SUBOPT_0x1
000109 e2ef      	LDI  R30,LOW(47)
00010a 940e 041d 	CALL SUBOPT_0x1
00010c e2ea      	LDI  R30,LOW(42)
00010d 940e 04a8 	CALL __EQB12
00010f 29e0      	OR   R30,R0
000110 f059      	BREQ _0x29
                 ; 0000 0052             {
                 ; 0000 0053                 Operand = Key; lcd_clear(); lcd_puts(Buf1);
000111 2c75      	MOV  R7,R5
000112 d0d9      	RCALL _lcd_clear
000113 940e 0422 	CALL SUBOPT_0x2
                 ; 0000 0054                 lcd_putchar(' '); lcd_putchar(Key); lcd_putchar(' '); State =1;
000115 940e 0426 	CALL SUBOPT_0x3
000117 e2a0      	LDI  R26,LOW(32)
000118 d0e0      	RCALL _lcd_putchar
000119 e0e1      	LDI  R30,LOW(1)
00011a 2e4e      	MOV  R4,R30
                 ; 0000 0055             }
                 ; 0000 0056             else
00011b c009      	RJMP _0x2A
                 _0x29:
                 ; 0000 0057             {
                 ; 0000 0058                 Num1 = Num1 * 10 + Key - 48; lcd_clear();
00011c 01f5      	MOVW R30,R10
00011d 940e 042c 	CALL SUBOPT_0x4
00011f 015d      	MOVW R10,R26
000120 d0cb      	RCALL _lcd_clear
                 ; 0000 0059                 sprintf(Buf1,"%d",Num1); lcd_puts(Buf1);
000121 940e 0436 	CALL SUBOPT_0x5
000123 940e 0422 	CALL SUBOPT_0x2
                 ; 0000 005A             }
                 _0x2A:
                 _0x28:
                 ; 0000 005B             break;
000125 c095      	RJMP _0x25
                 ; 0000 005C             case 1:
                 _0x26:
000126 30e1      	CPI  R30,LOW(0x1)
000127 e0a0      	LDI  R26,HIGH(0x1)
000128 07fa      	CPC  R31,R26
000129 f009      	BREQ PC+2
00012a c090      	RJMP _0x25
                 ; 0000 005D             if (Key == 'C')
00012b e4e3      	LDI  R30,LOW(67)
00012c 15e5      	CP   R30,R5
00012d f421      	BRNE _0x2C
                 ; 0000 005E             {
                 ; 0000 005F                 Num0=0; Num1=0; Operand=''; lcd_clear(); lcd_putchar('0'); State = 0;
00012e 940e 0413 	CALL SUBOPT_0x0
000130 2444      	CLR  R4
                 ; 0000 0060             }
                 ; 0000 0061             else if ((Key == '1') | (Key == '2') | (Key == '3') | (Key == '4')| (Key == '5') | (Key == '6') | (Key == '7 ...
000131 c089      	RJMP _0x2D
                 _0x2C:
                 ; 0000 0062                 | (Key == '9') | (Key == '0'))
000132 2da5      	MOV  R26,R5
000133 e3e1      	LDI  R30,LOW(49)
000134 940e 04a8 	CALL __EQB12
000136 2e0e      	MOV  R0,R30
000137 e3e2      	LDI  R30,LOW(50)
000138 940e 041d 	CALL SUBOPT_0x1
00013a e3e3      	LDI  R30,LOW(51)
00013b 940e 041d 	CALL SUBOPT_0x1
00013d e3e4      	LDI  R30,LOW(52)
00013e 940e 041d 	CALL SUBOPT_0x1
000140 e3e5      	LDI  R30,LOW(53)
000141 940e 041d 	CALL SUBOPT_0x1
000143 e3e6      	LDI  R30,LOW(54)
000144 940e 041d 	CALL SUBOPT_0x1
000146 e3e7      	LDI  R30,LOW(55)
000147 940e 041d 	CALL SUBOPT_0x1
000149 e3e8      	LDI  R30,LOW(56)
00014a 940e 041d 	CALL SUBOPT_0x1
00014c e3e9      	LDI  R30,LOW(57)
00014d 940e 041d 	CALL SUBOPT_0x1
00014f e3e0      	LDI  R30,LOW(48)
000150 940e 04a8 	CALL __EQB12
000152 29e0      	OR   R30,R0
000153 f0d9      	BREQ _0x2E
                 ; 0000 0063             {
                 ; 0000 0064                 Num0 = Num0 * 10 + Key - 48; lcd_gotoxy(0,0); lcd_puts(Buf1);
000154 01f4      	MOVW R30,R8
000155 940e 042c 	CALL SUBOPT_0x4
000157 014d      	MOVW R8,R26
000158 e0e0      	LDI  R30,LOW(0)
000159 93ea      	ST   -Y,R30
00015a e0a0      	LDI  R26,LOW(0)
00015b d081      	RCALL _lcd_gotoxy
00015c 940e 0422 	CALL SUBOPT_0x2
                 ; 0000 0065                 lcd_putchar(' '); lcd_putchar(Operand); lcd_putchar(' ');
00015e e2a0      	LDI  R26,LOW(32)
00015f d099      	RCALL _lcd_putchar
000160 2da7      	MOV  R26,R7
000161 d097      	RCALL _lcd_putchar
000162 e2a0      	LDI  R26,LOW(32)
000163 d095      	RCALL _lcd_putchar
                 ; 0000 0066                 sprintf(Buf0,"%d",Num0); lcd_puts(Buf0);
000164 e7e3      	LDI  R30,LOW(_Buf0)
000165 e0f2      	LDI  R31,HIGH(_Buf0)
000166 940e 0448 	CALL SUBOPT_0x6
000168 01f4      	MOVW R30,R8
000169 940e 044f 	CALL SUBOPT_0x7
00016b e7a3      	LDI  R26,LOW(_Buf0)
00016c e0b2      	LDI  R27,HIGH(_Buf0)
00016d d0a5      	RCALL _lcd_puts
                 ; 0000 0067             }
                 ; 0000 0068             else if (Key == '=')
00016e c04c      	RJMP _0x2F
                 _0x2E:
00016f e3ed      	LDI  R30,LOW(61)
000170 15e5      	CP   R30,R5
000171 f009      	BREQ PC+2
000172 c048      	RJMP _0x30
                 ; 0000 0069             {
                 ; 0000 006A                 lcd_putchar(' '); lcd_putchar(Key); lcd_gotoxy(0,1);
000173 940e 0426 	CALL SUBOPT_0x3
000175 e0e0      	LDI  R30,LOW(0)
000176 93ea      	ST   -Y,R30
000177 e0a1      	LDI  R26,LOW(1)
000178 d064      	RCALL _lcd_gotoxy
                 ; 0000 006B                 if (Operand == '+')
000179 e2eb      	LDI  R30,LOW(43)
00017a 15e7      	CP   R30,R7
00017b f421      	BRNE _0x31
                 ; 0000 006C                 {
                 ; 0000 006D                     Result = Num1 + Num0; sprintf(Buf,"%d",Result); lcd_puts(Buf);
00017c 01f4      	MOVW R30,R8
00017d 0dea      	ADD  R30,R10
00017e 1dfb      	ADC  R31,R11
00017f c02a      	RJMP _0x3B
                 ; 0000 006E                 }
                 ; 0000 006F                 else if (Operand == '-')
                 _0x31:
000180 e2ed      	LDI  R30,LOW(45)
000181 15e7      	CP   R30,R7
000182 f421      	BRNE _0x33
                 ; 0000 0070                 {
                 ; 0000 0071                     Result = Num1 - Num0; sprintf(Buf,"%d",Result); lcd_puts(Buf);
000183 01f5      	MOVW R30,R10
000184 19e8      	SUB  R30,R8
000185 09f9      	SBC  R31,R9
000186 c023      	RJMP _0x3B
                 ; 0000 0072                 }
                 ; 0000 0073                 else if (Operand == '/')
                 _0x33:
000187 e2ef      	LDI  R30,LOW(47)
000188 15e7      	CP   R30,R7
000189 f4c9      	BRNE _0x35
                 ; 0000 0074                 {
                 ; 0000 0075                     if (Num1 == 0)
00018a 2c0a      	MOV  R0,R10
00018b 280b      	OR   R0,R11
00018c f431      	BRNE _0x36
                 ; 0000 0076                     {
                 ; 0000 0077                         Result = 1; lcd_puts("Nan");
00018d e0e1      	LDI  R30,LOW(1)
00018e e0f0      	LDI  R31,HIGH(1)
00018f 016f      	MOVW R12,R30
                +
000190 e6a6     +LDI R26 , LOW ( _0x1F + ( 6 ) )
000191 e0b2     +LDI R27 , HIGH ( _0x1F + ( 6 ) )
                 	__POINTW2MN _0x1F,6
000192 c00e      	RJMP _0x3C
                 ; 0000 0078                     }
                 ; 0000 0079                     else
                 _0x36:
                 ; 0000 007A                     {
                 ; 0000 007B                         Result = power(Num1,Num0);
000193 92ba      	ST   -Y,R11
000194 92aa      	ST   -Y,R10
000195 01d4      	MOVW R26,R8
000196 defb      	RCALL _power
000197 016f      	MOVW R12,R30
                 ; 0000 007C                         sprintf(Buf,"%d",Result); lcd_puts(Buf);
000198 e7e8      	LDI  R30,LOW(_Buf)
000199 e0f2      	LDI  R31,HIGH(_Buf)
00019a 940e 0448 	CALL SUBOPT_0x6
00019c 01f6      	MOVW R30,R12
00019d 940e 044f 	CALL SUBOPT_0x7
00019f e7a8      	LDI  R26,LOW(_Buf)
0001a0 e0b2      	LDI  R27,HIGH(_Buf)
                 _0x3C:
0001a1 d071      	RCALL _lcd_puts
                 ; 0000 007D                     }
                 ; 0000 007E                 }
                 ; 0000 007F                 else if (Operand == '*')
0001a2 c012      	RJMP _0x38
                 _0x35:
0001a3 e2ea      	LDI  R30,LOW(42)
0001a4 15e7      	CP   R30,R7
0001a5 f479      	BRNE _0x39
                 ; 0000 0080                 {
                 ; 0000 0081                     Result = Num1 * Num0 ; sprintf(Buf,"%d",Result); lcd_puts(Buf);
0001a6 01f4      	MOVW R30,R8
0001a7 01d5      	MOVW R26,R10
0001a8 940e 04b5 	CALL __MULW12
                 _0x3B:
0001aa 016f      	MOVW R12,R30
0001ab e7e8      	LDI  R30,LOW(_Buf)
0001ac e0f2      	LDI  R31,HIGH(_Buf)
0001ad 940e 0448 	CALL SUBOPT_0x6
0001af 01f6      	MOVW R30,R12
0001b0 940e 044f 	CALL SUBOPT_0x7
0001b2 e7a8      	LDI  R26,LOW(_Buf)
0001b3 e0b2      	LDI  R27,HIGH(_Buf)
0001b4 d05e      	RCALL _lcd_puts
                 ; 0000 0082                 }
                 ; 0000 0083                     State = 0; Num0 = 0; Num1 = Result; sprintf(Buf1,"%d",Num1);
                 _0x39:
                 _0x38:
0001b5 2444      	CLR  R4
0001b6 2488      	CLR  R8
0001b7 2499      	CLR  R9
0001b8 0156      	MOVW R10,R12
0001b9 940e 0436 	CALL SUBOPT_0x5
                 ; 0000 0084             }
                 ; 0000 0085             break;
                 _0x30:
                 _0x2F:
                 _0x2D:
                 ; 0000 0086         }
                 _0x25:
                 ; 0000 0087     }
0001bb cf39      	RJMP _0x20
                 ; 0000 0088 }
                 _0x3A:
0001bc cfff      	RJMP _0x3A
                 ; .FEND
                 
                 	.DSEG
                 _0x1F:
000260           	.BYTE 0xA
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001bd 93aa      	ST   -Y,R26
0001be b3eb      	IN   R30,0x1B
0001bf 70ef      	ANDI R30,LOW(0xF)
0001c0 2fae      	MOV  R26,R30
0001c1 81e8      	LD   R30,Y
0001c2 7fe0      	ANDI R30,LOW(0xF0)
0001c3 2bea      	OR   R30,R26
0001c4 bbeb      	OUT  0x1B,R30
                +
0001c5 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001c6 958a     +DEC R24
0001c7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001c8 9ada      	SBI  0x1B,2
                +
0001c9 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001ca 958a     +DEC R24
0001cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001cc 98da      	CBI  0x1B,2
                +
0001cd e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001ce 958a     +DEC R24
0001cf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001d0 c07f      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001d1 93aa      	ST   -Y,R26
0001d2 81a8      	LD   R26,Y
0001d3 dfe9      	RCALL __lcd_write_nibble_G100
0001d4 81e8          ld    r30,y
0001d5 95e2          swap  r30
0001d6 83e8          st    y,r30
0001d7 81a8      	LD   R26,Y
0001d8 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001d9 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001da 958a     +DEC R24
0001db f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001dc c073      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001dd 93aa      	ST   -Y,R26
0001de 81e8      	LD   R30,Y
0001df e0f0      	LDI  R31,0
0001e0 56e8      	SUBI R30,LOW(-__base_y_G100)
0001e1 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001e2 81e0      	LD   R30,Z
0001e3 81a9      	LDD  R26,Y+1
0001e4 0fae      	ADD  R26,R30
0001e5 dfeb      	RCALL __lcd_write_data
0001e6 8069      	LDD  R6,Y+1
0001e7 81e8      	LD   R30,Y
0001e8 93e0 029c 	STS  __lcd_y,R30
0001ea 9622      	ADIW R28,2
0001eb 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001ec e0a2      	LDI  R26,LOW(2)
0001ed 940e 0458 	CALL SUBOPT_0x8
0001ef e0ac      	LDI  R26,LOW(12)
0001f0 dfe0      	RCALL __lcd_write_data
0001f1 e0a1      	LDI  R26,LOW(1)
0001f2 940e 0458 	CALL SUBOPT_0x8
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 93e0 029c 	STS  __lcd_y,R30
0001f7 2e6e      	MOV  R6,R30
0001f8 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001f9 93aa      	ST   -Y,R26
0001fa 81a8      	LD   R26,Y
0001fb 30aa      	CPI  R26,LOW(0xA)
0001fc f021      	BREQ _0x2000005
0001fd 91e0 029d 	LDS  R30,__lcd_maxx
0001ff 166e      	CP   R6,R30
000200 f060      	BRLO _0x2000004
                 _0x2000005:
000201 e0e0      	LDI  R30,LOW(0)
000202 93ea      	ST   -Y,R30
000203 91a0 029c 	LDS  R26,__lcd_y
000205 5faf      	SUBI R26,-LOW(1)
000206 93a0 029c 	STS  __lcd_y,R26
000208 dfd4      	RCALL _lcd_gotoxy
000209 81a8      	LD   R26,Y
00020a 30aa      	CPI  R26,LOW(0xA)
00020b f409      	BRNE _0x2000007
00020c c043      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
00020d 9463      	INC  R6
00020e 9ad8      	SBI  0x1B,0
00020f 81a8      	LD   R26,Y
000210 dfc0      	RCALL __lcd_write_data
000211 98d8      	CBI  0x1B,0
000212 c03d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000213 93ba      	ST   -Y,R27
000214 93aa      	ST   -Y,R26
000215 931a      	ST   -Y,R17
                 _0x2000008:
000216 81a9      	LDD  R26,Y+1
000217 81ba      	LDD  R27,Y+1+1
000218 91ed      	LD   R30,X+
000219 83a9      	STD  Y+1,R26
00021a 83ba      	STD  Y+1+1,R27
00021b 2f1e      	MOV  R17,R30
00021c 30e0      	CPI  R30,0
00021d f019      	BREQ _0x200000A
00021e 2fa1      	MOV  R26,R17
00021f dfd9      	RCALL _lcd_putchar
000220 cff5      	RJMP _0x2000008
                 _0x200000A:
000221 8118      	LDD  R17,Y+0
000222 9623      	ADIW R28,3
000223 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000224 93aa      	ST   -Y,R26
000225 b3ea      	IN   R30,0x1A
000226 6fe0      	ORI  R30,LOW(0xF0)
000227 bbea      	OUT  0x1A,R30
000228 9ad2      	SBI  0x1A,2
000229 9ad0      	SBI  0x1A,0
00022a 9ad1      	SBI  0x1A,1
00022b 98da      	CBI  0x1B,2
00022c 98d8      	CBI  0x1B,0
00022d 98d9      	CBI  0x1B,1
00022e 81e8      	LD   R30,Y
00022f 93e0 029d 	STS  __lcd_maxx,R30
000231 58e0      	SUBI R30,-LOW(128)
                +
000232 93e0 029a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000234 81e8      	LD   R30,Y
000235 54e0      	SUBI R30,-LOW(192)
                +
000236 93e0 029b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000238 e1a4      	LDI  R26,LOW(20)
000239 e0b0      	LDI  R27,0
00023a 940e 0491 	CALL _delay_ms
00023c 940e 045e 	CALL SUBOPT_0x9
00023e 940e 045e 	CALL SUBOPT_0x9
000240 940e 045e 	CALL SUBOPT_0x9
000242 e2a0      	LDI  R26,LOW(32)
000243 df79      	RCALL __lcd_write_nibble_G100
                +
000244 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000245 958a     +DEC R24
000246 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000247 e2a8      	LDI  R26,LOW(40)
000248 df88      	RCALL __lcd_write_data
000249 e0a4      	LDI  R26,LOW(4)
00024a df86      	RCALL __lcd_write_data
00024b e8a5      	LDI  R26,LOW(133)
00024c df84      	RCALL __lcd_write_data
00024d e0a6      	LDI  R26,LOW(6)
00024e df82      	RCALL __lcd_write_data
00024f df9c      	RCALL _lcd_clear
                 _0x20C0002:
000250 9621      	ADIW R28,1
000251 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000252 93ba      	ST   -Y,R27
000253 93aa      	ST   -Y,R26
000254 931a      	ST   -Y,R17
000255 930a      	ST   -Y,R16
000256 81aa      	LDD  R26,Y+2
000257 81bb      	LDD  R27,Y+2+1
000258 9612      	ADIW R26,2
000259 940e 04c8 	CALL __GETW1P
00025b 9730      	SBIW R30,0
00025c f159      	BREQ _0x2020010
00025d 81aa      	LDD  R26,Y+2
00025e 81bb      	LDD  R27,Y+2+1
00025f 9614      	ADIW R26,4
000260 940e 04c8 	CALL __GETW1P
000262 018f      	MOVW R16,R30
000263 9730      	SBIW R30,0
000264 f061      	BREQ _0x2020012
                +
000265 3002     +CPI R16 , LOW ( 2 )
000266 e0e0     +LDI R30 , HIGH ( 2 )
000267 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000268 f098      	BRLO _0x2020013
000269 01f8      	MOVW R30,R16
00026a 9731      	SBIW R30,1
00026b 018f      	MOVW R16,R30
                +
00026c 81aa     +LDD R26 , Y + 2
00026d 81bb     +LDD R27 , Y + 2 + 1
00026e 9614     +ADIW R26 , 4
00026f 93ed     +ST X + , R30
000270 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000271 81aa      	LDD  R26,Y+2
000272 81bb      	LDD  R27,Y+2+1
000273 9612      	ADIW R26,2
000274 91ed      	LD   R30,X+
000275 91fd      	LD   R31,X+
000276 9631      	ADIW R30,1
000277 93fe      	ST   -X,R31
000278 93ee      	ST   -X,R30
000279 9731      	SBIW R30,1
00027a 81ac      	LDD  R26,Y+4
00027b 83a0      	STD  Z+0,R26
                 _0x2020013:
00027c 81aa      	LDD  R26,Y+2
00027d 81bb      	LDD  R27,Y+2+1
00027e 940e 04c8 	CALL __GETW1P
000280 23ff      	TST  R31
000281 f02a      	BRMI _0x2020014
000282 91ed      	LD   R30,X+
000283 91fd      	LD   R31,X+
000284 9631      	ADIW R30,1
000285 93fe      	ST   -X,R31
000286 93ee      	ST   -X,R30
                 _0x2020014:
000287 c006      	RJMP _0x2020015
                 _0x2020010:
000288 81aa      	LDD  R26,Y+2
000289 81bb      	LDD  R27,Y+2+1
00028a efef      	LDI  R30,LOW(65535)
00028b efff      	LDI  R31,HIGH(65535)
00028c 93ed      	ST   X+,R30
00028d 93fc      	ST   X,R31
                 _0x2020015:
00028e 8119      	LDD  R17,Y+1
00028f 8108      	LDD  R16,Y+0
000290 9625      	ADIW R28,5
000291 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000292 93ba      	ST   -Y,R27
000293 93aa      	ST   -Y,R26
000294 9726      	SBIW R28,6
000295 940e 04d5 	CALL __SAVELOCR6
000297 e010      	LDI  R17,0
000298 85ac      	LDD  R26,Y+12
000299 85bd      	LDD  R27,Y+12+1
00029a e0e0      	LDI  R30,LOW(0)
00029b e0f0      	LDI  R31,HIGH(0)
00029c 93ed      	ST   X+,R30
00029d 93fc      	ST   X,R31
                 _0x2020016:
00029e 89ea      	LDD  R30,Y+18
00029f 89fb      	LDD  R31,Y+18+1
0002a0 9631      	ADIW R30,1
0002a1 8bea      	STD  Y+18,R30
0002a2 8bfb      	STD  Y+18+1,R31
0002a3 9731      	SBIW R30,1
0002a4 91e4      	LPM  R30,Z
0002a5 2f2e      	MOV  R18,R30
0002a6 30e0      	CPI  R30,0
0002a7 f409      	BRNE PC+2
0002a8 c115      	RJMP _0x2020018
0002a9 2fe1      	MOV  R30,R17
0002aa 30e0      	CPI  R30,0
0002ab f439      	BRNE _0x202001C
0002ac 3225      	CPI  R18,37
0002ad f411      	BRNE _0x202001D
0002ae e011      	LDI  R17,LOW(1)
0002af c002      	RJMP _0x202001E
                 _0x202001D:
0002b0 940e 0465 	CALL SUBOPT_0xA
                 _0x202001E:
0002b2 c10a      	RJMP _0x202001B
                 _0x202001C:
0002b3 30e1      	CPI  R30,LOW(0x1)
0002b4 f4a9      	BRNE _0x202001F
0002b5 3225      	CPI  R18,37
0002b6 f419      	BRNE _0x2020020
0002b7 940e 0465 	CALL SUBOPT_0xA
0002b9 c102      	RJMP _0x20200CC
                 _0x2020020:
0002ba e012      	LDI  R17,LOW(2)
0002bb e040      	LDI  R20,LOW(0)
0002bc e000      	LDI  R16,LOW(0)
0002bd 322d      	CPI  R18,45
0002be f411      	BRNE _0x2020021
0002bf e001      	LDI  R16,LOW(1)
0002c0 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002c1 322b      	CPI  R18,43
0002c2 f411      	BRNE _0x2020022
0002c3 e24b      	LDI  R20,LOW(43)
0002c4 c0f8      	RJMP _0x202001B
                 _0x2020022:
0002c5 3220      	CPI  R18,32
0002c6 f411      	BRNE _0x2020023
0002c7 e240      	LDI  R20,LOW(32)
0002c8 c0f4      	RJMP _0x202001B
                 _0x2020023:
0002c9 c002      	RJMP _0x2020024
                 _0x202001F:
0002ca 30e2      	CPI  R30,LOW(0x2)
0002cb f439      	BRNE _0x2020025
                 _0x2020024:
0002cc e050      	LDI  R21,LOW(0)
0002cd e013      	LDI  R17,LOW(3)
0002ce 3320      	CPI  R18,48
0002cf f411      	BRNE _0x2020026
0002d0 6800      	ORI  R16,LOW(128)
0002d1 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002d2 c003      	RJMP _0x2020027
                 _0x2020025:
0002d3 30e3      	CPI  R30,LOW(0x3)
0002d4 f009      	BREQ PC+2
0002d5 c0e7      	RJMP _0x202001B
                 _0x2020027:
0002d6 3320      	CPI  R18,48
0002d7 f010      	BRLO _0x202002A
0002d8 332a      	CPI  R18,58
0002d9 f008      	BRLO _0x202002B
                 _0x202002A:
0002da c007      	RJMP _0x2020029
                 _0x202002B:
0002db e0aa      	LDI  R26,LOW(10)
0002dc 9f5a      	MUL  R21,R26
0002dd 2d50      	MOV  R21,R0
0002de 2fe2      	MOV  R30,R18
0002df 53e0      	SUBI R30,LOW(48)
0002e0 0f5e      	ADD  R21,R30
0002e1 c0db      	RJMP _0x202001B
                 _0x2020029:
0002e2 2fe2      	MOV  R30,R18
0002e3 36e3      	CPI  R30,LOW(0x63)
0002e4 f449      	BRNE _0x202002F
0002e5 940e 046c 	CALL SUBOPT_0xB
0002e7 89e8      	LDD  R30,Y+16
0002e8 89f9      	LDD  R31,Y+16+1
0002e9 81a4      	LDD  R26,Z+4
0002ea 93aa      	ST   -Y,R26
0002eb 940e 0472 	CALL SUBOPT_0xC
0002ed c0ce      	RJMP _0x2020030
                 _0x202002F:
0002ee 37e3      	CPI  R30,LOW(0x73)
0002ef f441      	BRNE _0x2020032
0002f0 940e 046c 	CALL SUBOPT_0xB
0002f2 940e 0478 	CALL SUBOPT_0xD
0002f4 940e 03fa 	CALL _strlen
0002f6 2f1e      	MOV  R17,R30
0002f7 c00a      	RJMP _0x2020033
                 _0x2020032:
0002f8 37e0      	CPI  R30,LOW(0x70)
0002f9 f461      	BRNE _0x2020035
0002fa 940e 046c 	CALL SUBOPT_0xB
0002fc 940e 0478 	CALL SUBOPT_0xD
0002fe 940e 0406 	CALL _strlenf
000300 2f1e      	MOV  R17,R30
000301 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000302 6002      	ORI  R16,LOW(2)
000303 770f      	ANDI R16,LOW(127)
000304 e030      	LDI  R19,LOW(0)
000305 c034      	RJMP _0x2020036
                 _0x2020035:
000306 36e4      	CPI  R30,LOW(0x64)
000307 f011      	BREQ _0x2020039
000308 36e9      	CPI  R30,LOW(0x69)
000309 f411      	BRNE _0x202003A
                 _0x2020039:
00030a 6004      	ORI  R16,LOW(4)
00030b c002      	RJMP _0x202003B
                 _0x202003A:
00030c 37e5      	CPI  R30,LOW(0x75)
00030d f431      	BRNE _0x202003C
                 _0x202003B:
00030e e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00030f e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000310 83ee      	STD  Y+6,R30
000311 83ff      	STD  Y+6+1,R31
000312 e015      	LDI  R17,LOW(5)
000313 c00c      	RJMP _0x202003D
                 _0x202003C:
000314 35e8      	CPI  R30,LOW(0x58)
000315 f411      	BRNE _0x202003F
000316 6008      	ORI  R16,LOW(8)
000317 c003      	RJMP _0x2020040
                 _0x202003F:
000318 37e8      	CPI  R30,LOW(0x78)
000319 f009      	BREQ PC+2
00031a c0a1      	RJMP _0x2020071
                 _0x2020040:
00031b e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00031c e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00031d 83ee      	STD  Y+6,R30
00031e 83ff      	STD  Y+6+1,R31
00031f e014      	LDI  R17,LOW(4)
                 _0x202003D:
000320 ff02      	SBRS R16,2
000321 c014      	RJMP _0x2020042
000322 940e 046c 	CALL SUBOPT_0xB
000324 940e 0482 	CALL SUBOPT_0xE
000326 85ab      	LDD  R26,Y+11
000327 23aa      	TST  R26
000328 f43a      	BRPL _0x2020043
000329 85ea      	LDD  R30,Y+10
00032a 85fb      	LDD  R31,Y+10+1
00032b 940e 049f 	CALL __ANEGW1
00032d 87ea      	STD  Y+10,R30
00032e 87fb      	STD  Y+10+1,R31
00032f e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000330 3040      	CPI  R20,0
000331 f011      	BREQ _0x2020044
000332 5f1f      	SUBI R17,-LOW(1)
000333 c001      	RJMP _0x2020045
                 _0x2020044:
000334 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000335 c004      	RJMP _0x2020046
                 _0x2020042:
000336 940e 046c 	CALL SUBOPT_0xB
000338 940e 0482 	CALL SUBOPT_0xE
                 _0x2020046:
                 _0x2020036:
00033a fd00      	SBRC R16,0
00033b c011      	RJMP _0x2020047
                 _0x2020048:
00033c 1715      	CP   R17,R21
00033d f478      	BRSH _0x202004A
00033e ff07      	SBRS R16,7
00033f c008      	RJMP _0x202004B
000340 ff02      	SBRS R16,2
000341 c004      	RJMP _0x202004C
000342 7f0b      	ANDI R16,LOW(251)
000343 2f24      	MOV  R18,R20
000344 5011      	SUBI R17,LOW(1)
000345 c001      	RJMP _0x202004D
                 _0x202004C:
000346 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000347 c001      	RJMP _0x202004E
                 _0x202004B:
000348 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000349 940e 0465 	CALL SUBOPT_0xA
00034b 5051      	SUBI R21,LOW(1)
00034c cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00034d 2f31      	MOV  R19,R17
00034e ff01      	SBRS R16,1
00034f c017      	RJMP _0x202004F
                 _0x2020050:
000350 3030      	CPI  R19,0
000351 f0a1      	BREQ _0x2020052
000352 ff03      	SBRS R16,3
000353 c006      	RJMP _0x2020053
000354 81ee      	LDD  R30,Y+6
000355 81ff      	LDD  R31,Y+6+1
000356 9125      	LPM  R18,Z+
000357 83ee      	STD  Y+6,R30
000358 83ff      	STD  Y+6+1,R31
000359 c005      	RJMP _0x2020054
                 _0x2020053:
00035a 81ae      	LDD  R26,Y+6
00035b 81bf      	LDD  R27,Y+6+1
00035c 912d      	LD   R18,X+
00035d 83ae      	STD  Y+6,R26
00035e 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00035f 940e 0465 	CALL SUBOPT_0xA
000361 3050      	CPI  R21,0
000362 f009      	BREQ _0x2020055
000363 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000364 5031      	SUBI R19,LOW(1)
000365 cfea      	RJMP _0x2020050
                 _0x2020052:
000366 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000367 e320      	LDI  R18,LOW(48)
000368 81ee      	LDD  R30,Y+6
000369 81ff      	LDD  R31,Y+6+1
00036a 940e 04cc 	CALL __GETW1PF
00036c 87e8      	STD  Y+8,R30
00036d 87f9      	STD  Y+8+1,R31
00036e 81ee      	LDD  R30,Y+6
00036f 81ff      	LDD  R31,Y+6+1
000370 9632      	ADIW R30,2
000371 83ee      	STD  Y+6,R30
000372 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000373 85e8      	LDD  R30,Y+8
000374 85f9      	LDD  R31,Y+8+1
000375 85aa      	LDD  R26,Y+10
000376 85bb      	LDD  R27,Y+10+1
000377 17ae      	CP   R26,R30
000378 07bf      	CPC  R27,R31
000379 f050      	BRLO _0x202005C
00037a 5f2f      	SUBI R18,-LOW(1)
00037b 85a8      	LDD  R26,Y+8
00037c 85b9      	LDD  R27,Y+8+1
00037d 85ea      	LDD  R30,Y+10
00037e 85fb      	LDD  R31,Y+10+1
00037f 1bea      	SUB  R30,R26
000380 0bfb      	SBC  R31,R27
000381 87ea      	STD  Y+10,R30
000382 87fb      	STD  Y+10+1,R31
000383 cfef      	RJMP _0x202005A
                 _0x202005C:
000384 332a      	CPI  R18,58
000385 f028      	BRLO _0x202005D
000386 ff03      	SBRS R16,3
000387 c002      	RJMP _0x202005E
000388 5f29      	SUBI R18,-LOW(7)
000389 c001      	RJMP _0x202005F
                 _0x202005E:
00038a 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00038b fd04      	SBRC R16,4
00038c c01a      	RJMP _0x2020061
00038d 3321      	CPI  R18,49
00038e f420      	BRSH _0x2020063
00038f 85a8      	LDD  R26,Y+8
000390 85b9      	LDD  R27,Y+8+1
000391 9711      	SBIW R26,1
000392 f409      	BRNE _0x2020062
                 _0x2020063:
000393 c009      	RJMP _0x20200CD
                 _0x2020062:
000394 1753      	CP   R21,R19
000395 f010      	BRLO _0x2020067
000396 ff00      	SBRS R16,0
000397 c001      	RJMP _0x2020068
                 _0x2020067:
000398 c013      	RJMP _0x2020066
                 _0x2020068:
000399 e220      	LDI  R18,LOW(32)
00039a ff07      	SBRS R16,7
00039b c00b      	RJMP _0x2020069
00039c e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00039d 6100      	ORI  R16,LOW(16)
00039e ff02      	SBRS R16,2
00039f c007      	RJMP _0x202006A
0003a0 7f0b      	ANDI R16,LOW(251)
0003a1 934a      	ST   -Y,R20
0003a2 940e 0472 	CALL SUBOPT_0xC
0003a4 3050      	CPI  R21,0
0003a5 f009      	BREQ _0x202006B
0003a6 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0003a7 940e 0465 	CALL SUBOPT_0xA
0003a9 3050      	CPI  R21,0
0003aa f009      	BREQ _0x202006C
0003ab 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0003ac 5031      	SUBI R19,LOW(1)
0003ad 85a8      	LDD  R26,Y+8
0003ae 85b9      	LDD  R27,Y+8+1
0003af 9712      	SBIW R26,2
0003b0 f008      	BRLO _0x2020059
0003b1 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0003b2 ff00      	SBRS R16,0
0003b3 c008      	RJMP _0x202006D
                 _0x202006E:
0003b4 3050      	CPI  R21,0
0003b5 f031      	BREQ _0x2020070
0003b6 5051      	SUBI R21,LOW(1)
0003b7 e2e0      	LDI  R30,LOW(32)
0003b8 93ea      	ST   -Y,R30
0003b9 940e 0472 	CALL SUBOPT_0xC
0003bb cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0003bc e010      	LDI  R17,LOW(0)
                 _0x202001B:
0003bd cee0      	RJMP _0x2020016
                 _0x2020018:
0003be 85ac      	LDD  R26,Y+12
0003bf 85bd      	LDD  R27,Y+12+1
0003c0 940e 04c8 	CALL __GETW1P
0003c2 940e 04dc 	CALL __LOADLOCR6
0003c4 9664      	ADIW R28,20
0003c5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003c6 92ff      	PUSH R15
0003c7 2ef8      	MOV  R15,R24
0003c8 9726      	SBIW R28,6
0003c9 940e 04d7 	CALL __SAVELOCR4
0003cb 940e 048a 	CALL SUBOPT_0xF
0003cd 9730      	SBIW R30,0
0003ce f419      	BRNE _0x2020072
0003cf efef      	LDI  R30,LOW(65535)
0003d0 efff      	LDI  R31,HIGH(65535)
0003d1 c023      	RJMP _0x20C0001
                 _0x2020072:
0003d2 01de      	MOVW R26,R28
0003d3 9616      	ADIW R26,6
0003d4 940e 049b 	CALL __ADDW2R15
0003d6 018d      	MOVW R16,R26
0003d7 940e 048a 	CALL SUBOPT_0xF
0003d9 83ee      	STD  Y+6,R30
0003da 83ff      	STD  Y+6+1,R31
0003db e0e0      	LDI  R30,LOW(0)
0003dc 87e8      	STD  Y+8,R30
0003dd 87e9      	STD  Y+8+1,R30
0003de 01de      	MOVW R26,R28
0003df 961a      	ADIW R26,10
0003e0 940e 049b 	CALL __ADDW2R15
0003e2 940e 04c8 	CALL __GETW1P
0003e4 93fa      	ST   -Y,R31
0003e5 93ea      	ST   -Y,R30
0003e6 931a      	ST   -Y,R17
0003e7 930a      	ST   -Y,R16
0003e8 e5e2      	LDI  R30,LOW(_put_buff_G101)
0003e9 e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
0003ec 01de      	MOVW R26,R28
0003ed 961a      	ADIW R26,10
0003ee dea3      	RCALL __print_G101
0003ef 019f      	MOVW R18,R30
0003f0 81ae      	LDD  R26,Y+6
0003f1 81bf      	LDD  R27,Y+6+1
0003f2 e0e0      	LDI  R30,LOW(0)
0003f3 93ec      	ST   X,R30
0003f4 01f9      	MOVW R30,R18
                 _0x20C0001:
0003f5 940e 04de 	CALL __LOADLOCR4
0003f7 962a      	ADIW R28,10
0003f8 90ff      	POP  R15
0003f9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003fa 93ba      	ST   -Y,R27
0003fb 93aa      	ST   -Y,R26
0003fc 91a9          ld   r26,y+
0003fd 91b9          ld   r27,y+
0003fe 27ee          clr  r30
0003ff 27ff          clr  r31
                 strlen0:
000400 916d          ld   r22,x+
000401 2366          tst  r22
000402 f011          breq strlen1
000403 9631          adiw r30,1
000404 cffb          rjmp strlen0
                 strlen1:
000405 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000406 93ba      	ST   -Y,R27
000407 93aa      	ST   -Y,R26
000408 27aa          clr  r26
000409 27bb          clr  r27
00040a 91e9          ld   r30,y+
00040b 91f9          ld   r31,y+
                 strlenf0:
00040c 9005      	lpm  r0,z+
00040d 2000          tst  r0
00040e f011          breq strlenf1
00040f 9611          adiw r26,1
000410 cffb          rjmp strlenf0
                 strlenf1:
000411 01fd          movw r30,r26
000412 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _scan:
00026a           	.BYTE 0x4
                 _Buf1:
00026e           	.BYTE 0x5
                 _Buf0:
000273           	.BYTE 0x5
                 _Buf:
000278           	.BYTE 0x10
                 _arrkey:
000288           	.BYTE 0x10
                 __base_y_G100:
000298           	.BYTE 0x4
                 __lcd_y:
00029c           	.BYTE 0x1
                 __lcd_maxx:
00029d           	.BYTE 0x1
                 __seed_G105:
00029e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000413 2488      	CLR  R8
000414 2499      	CLR  R9
000415 24aa      	CLR  R10
000416 24bb      	CLR  R11
000417 2477      	CLR  R7
000418 940e 01ec 	CALL _lcd_clear
00041a e3a0      	LDI  R26,LOW(48)
00041b 940c 01f9 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
00041d 940e 04a8 	CALL __EQB12
00041f 2a0e      	OR   R0,R30
000420 2da5      	MOV  R26,R5
000421 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000422 e6ae      	LDI  R26,LOW(_Buf1)
000423 e0b2      	LDI  R27,HIGH(_Buf1)
000424 940c 0213 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000426 e2a0      	LDI  R26,LOW(32)
000427 940e 01f9 	CALL _lcd_putchar
000429 2da5      	MOV  R26,R5
00042a 940c 01f9 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00042c e0aa      	LDI  R26,LOW(10)
00042d e0b0      	LDI  R27,HIGH(10)
00042e 940e 04b5 	CALL __MULW12
000430 01df      	MOVW R26,R30
000431 27ee      	CLR  R30
000432 0da5      	ADD  R26,R5
000433 1fbe      	ADC  R27,R30
000434 97d0      	SBIW R26,48
000435 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
000436 e6ee      	LDI  R30,LOW(_Buf1)
000437 e0f2      	LDI  R31,HIGH(_Buf1)
000438 93fa      	ST   -Y,R31
000439 93ea      	ST   -Y,R30
                +
00043a e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
00043b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
00043c 93fa      	ST   -Y,R31
00043d 93ea      	ST   -Y,R30
00043e 01f5      	MOVW R30,R10
00043f 940e 04a3 	CALL __CWD1
000441 940e 04d0 	CALL __PUTPARD1
000443 e084      	LDI  R24,4
000444 940e 03c6 	CALL _sprintf
000446 9628      	ADIW R28,8
000447 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000448 93fa      	ST   -Y,R31
000449 93ea      	ST   -Y,R30
                +
00044a e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
00044b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
00044c 93fa      	ST   -Y,R31
00044d 93ea      	ST   -Y,R30
00044e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00044f 940e 04a3 	CALL __CWD1
000451 940e 04d0 	CALL __PUTPARD1
000453 e084      	LDI  R24,4
000454 940e 03c6 	CALL _sprintf
000456 9628      	ADIW R28,8
000457 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000458 940e 01d1 	CALL __lcd_write_data
00045a e0a3      	LDI  R26,LOW(3)
00045b e0b0      	LDI  R27,0
00045c 940c 0491 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
00045e e3a0      	LDI  R26,LOW(48)
00045f 940e 01bd 	CALL __lcd_write_nibble_G100
                +
000461 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000462 958a     +DEC R24
000463 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000464 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000465 932a      	ST   -Y,R18
000466 85ad      	LDD  R26,Y+13
000467 85be      	LDD  R27,Y+13+1
000468 85ef      	LDD  R30,Y+15
000469 89f8      	LDD  R31,Y+15+1
00046a 9509      	ICALL
00046b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00046c 89e8      	LDD  R30,Y+16
00046d 89f9      	LDD  R31,Y+16+1
00046e 9734      	SBIW R30,4
00046f 8be8      	STD  Y+16,R30
000470 8bf9      	STD  Y+16+1,R31
000471 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000472 85ad      	LDD  R26,Y+13
000473 85be      	LDD  R27,Y+13+1
000474 85ef      	LDD  R30,Y+15
000475 89f8      	LDD  R31,Y+15+1
000476 9509      	ICALL
000477 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000478 89a8      	LDD  R26,Y+16
000479 89b9      	LDD  R27,Y+16+1
00047a 9614      	ADIW R26,4
00047b 940e 04c8 	CALL __GETW1P
00047d 83ee      	STD  Y+6,R30
00047e 83ff      	STD  Y+6+1,R31
00047f 81ae      	LDD  R26,Y+6
000480 81bf      	LDD  R27,Y+6+1
000481 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
000482 89a8      	LDD  R26,Y+16
000483 89b9      	LDD  R27,Y+16+1
000484 9614      	ADIW R26,4
000485 940e 04c8 	CALL __GETW1P
000487 87ea      	STD  Y+10,R30
000488 87fb      	STD  Y+10+1,R31
000489 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00048a 01de      	MOVW R26,R28
00048b 961c      	ADIW R26,12
00048c 940e 049b 	CALL __ADDW2R15
00048e 940e 04c8 	CALL __GETW1P
000490 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000491 9610      	adiw r26,0
000492 f039      	breq __delay_ms1
                 __delay_ms0:
000493 95a8      	wdr
                +
000494 ef8a     +LDI R24 , LOW ( 0xFA )
000495 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000496 9701     +SBIW R24 , 1
000497 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000498 9711      	sbiw r26,1
000499 f7c9      	brne __delay_ms0
                 __delay_ms1:
00049a 9508      	ret
                 
                 __ADDW2R15:
00049b 2400      	CLR  R0
00049c 0daf      	ADD  R26,R15
00049d 1db0      	ADC  R27,R0
00049e 9508      	RET
                 
                 __ANEGW1:
00049f 95f1      	NEG  R31
0004a0 95e1      	NEG  R30
0004a1 40f0      	SBCI R31,0
0004a2 9508      	RET
                 
                 __CWD1:
0004a3 2f6f      	MOV  R22,R31
0004a4 0f66      	ADD  R22,R22
0004a5 0b66      	SBC  R22,R22
0004a6 2f76      	MOV  R23,R22
0004a7 9508      	RET
                 
                 __EQB12:
0004a8 17ea      	CP   R30,R26
0004a9 e0e1      	LDI  R30,1
0004aa f009      	BREQ __EQB12T
0004ab 27ee      	CLR  R30
                 __EQB12T:
0004ac 9508      	RET
                 
                 __MULW12U:
0004ad 9ffa      	MUL  R31,R26
0004ae 2df0      	MOV  R31,R0
0004af 9feb      	MUL  R30,R27
0004b0 0df0      	ADD  R31,R0
0004b1 9fea      	MUL  R30,R26
0004b2 2de0      	MOV  R30,R0
0004b3 0df1      	ADD  R31,R1
0004b4 9508      	RET
                 
                 __MULW12:
0004b5 d004      	RCALL __CHKSIGNW
0004b6 dff6      	RCALL __MULW12U
0004b7 f40e      	BRTC __MULW121
0004b8 dfe6      	RCALL __ANEGW1
                 __MULW121:
0004b9 9508      	RET
                 
                 __CHKSIGNW:
0004ba 94e8      	CLT
0004bb fff7      	SBRS R31,7
0004bc c002      	RJMP __CHKSW1
0004bd dfe1      	RCALL __ANEGW1
0004be 9468      	SET
                 __CHKSW1:
0004bf ffb7      	SBRS R27,7
0004c0 c006      	RJMP __CHKSW2
0004c1 95a0      	COM  R26
0004c2 95b0      	COM  R27
0004c3 9611      	ADIW R26,1
0004c4 f800      	BLD  R0,0
0004c5 9403      	INC  R0
0004c6 fa00      	BST  R0,0
                 __CHKSW2:
0004c7 9508      	RET
                 
                 __GETW1P:
0004c8 91ed      	LD   R30,X+
0004c9 91fc      	LD   R31,X
0004ca 9711      	SBIW R26,1
0004cb 9508      	RET
                 
                 __GETW1PF:
0004cc 9005      	LPM  R0,Z+
0004cd 91f4      	LPM  R31,Z
0004ce 2de0      	MOV  R30,R0
0004cf 9508      	RET
                 
                 __PUTPARD1:
0004d0 937a      	ST   -Y,R23
0004d1 936a      	ST   -Y,R22
0004d2 93fa      	ST   -Y,R31
0004d3 93ea      	ST   -Y,R30
0004d4 9508      	RET
                 
                 __SAVELOCR6:
0004d5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004d6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004d7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004d8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004d9 931a      	ST   -Y,R17
0004da 930a      	ST   -Y,R16
0004db 9508      	RET
                 
                 __LOADLOCR6:
0004dc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004dd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004de 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004df 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004e0 8119      	LDD  R17,Y+1
0004e1 8108      	LD   R16,Y
0004e2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :  10 r6 :   4 r7 :   7 
r8 :   9 r9 :   3 r10:  10 r11:   4 r12:   6 r13:   0 r14:   0 r15:   4 
r16:  44 r17:  32 r18:  33 r19:  11 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  26 r25:   3 r26: 136 r27:  51 r28:  17 r29:   1 r30: 243 r31:  82 
x  :  23 y  : 178 z  :  17 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   9 
adiw  :  28 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  39 brpl  :   1 brsh  :   3 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  95 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  13 cpc   :   4 cpi   :  36 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  26 ld    :  28 ldd   :  79 ldi   : 158 
lds   :   2 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  34 movw  :  37 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   7 out   :  11 pop   :   1 push  :   1 rcall :  35 ret   :  36 
reti  :   0 rjmp  :  80 rol   :   0 ror   :   0 sbc   :   3 sbci  :   5 
sbi   :   5 sbic  :   0 sbis  :   8 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  68 std   :  31 sts   :   6 sub   :   2 subi  :  21 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009c6   2384    118   2502   32768   7.6%
[.dseg] 0x000060 0x0002a2      0     66     66    2048   3.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
