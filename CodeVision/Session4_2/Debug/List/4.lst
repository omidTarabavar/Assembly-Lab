
AVRASM ver. 2.1.30  F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm Sun Nov 03 15:17:32 2024

F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1091): warning: Register r8 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1093): warning: Register r10 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1094): warning: Register r11 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1095): warning: Register r12 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1096): warning: Register r13 already defined by the .DEF directive
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1097): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Key=R5
                 	.DEF _State=R4
                 	.DEF _Operand=R7
                 	.DEF _Num0=R8
                 	.DEF _Num0_msb=R9
                 	.DEF _Num1=R10
                 	.DEF _Num1_msb=R11
                 	.DEF _Result=R12
                 	.DEF _Result_msb=R13
                 	.DEF __lcd_x=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000037 fdfe
000038 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
000039 3231
00003a 2f33
00003b 3534
00003c 2a36      	.DB  0x31,0x32,0x33,0x2F,0x34,0x35,0x36,0x2A
00003d 3837
00003e 2d39
00003f 3043
000040 2b3d      	.DB  0x37,0x38,0x39,0x2D,0x43,0x30,0x3D,0x2B
                 _0x0:
000041 7453
000042 7261
000043 0074
000044 6425      	.DB  0x53,0x74,0x61,0x72,0x74,0x0,0x25,0x64
000045 4e00
000046 6e61
F:\Github\Assembly-Lab\CodeVision\Session4_2\Debug\List\4.asm(1146): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0,0x4E,0x61,0x6E,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0008      	.DW  0x08
00004a 0004      	.DW  0x04
00004b 0066      	.DW  __REG_VARS*2
                 
00004c 0004      	.DW  0x04
00004d 026a      	.DW  _scan
00004e 006e      	.DW  _0x3*2
                 
00004f 0010      	.DW  0x10
000050 0288      	.DW  _arrkey
000051 0072      	.DW  _0x4*2
                 
000052 0006      	.DW  0x06
000053 0260      	.DW  _0x1C
000054 0082      	.DW  _0x0*2
                 
000055 0004      	.DW  0x04
000056 0266      	.DW  _0x1C+6
000057 008b      	.DW  _0x0*2+9
                 
000058 0002      	.DW  0x02
000059 0298      	.DW  __base_y_G100
00005a 0090      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bffb      	OUT  GICR,R31
000061 bfeb      	OUT  GICR,R30
000062 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006c 93ed      	ST   X+,R30
00006d 9701      	SBIW R24,1
00006e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006f e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000070 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000071 9185      	LPM  R24,Z+
000072 9195      	LPM  R25,Z+
000073 9700      	SBIW R24,0
000074 f061      	BREQ __GLOBAL_INI_END
000075 91a5      	LPM  R26,Z+
000076 91b5      	LPM  R27,Z+
000077 9005      	LPM  R0,Z+
000078 9015      	LPM  R1,Z+
000079 01bf      	MOVW R22,R30
00007a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007b 9005      	LPM  R0,Z+
00007c 920d      	ST   X+,R0
00007d 9701      	SBIW R24,1
00007e f7e1      	BRNE __GLOBAL_INI_LOOP
00007f 01fb      	MOVW R30,R22
000080 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000081 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000082 bfed      	OUT  SPL,R30
000083 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000084 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000085 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000086 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000087 940c 00c6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * 4.c
                 ; *
                 ; * Created: 11/3/2024 1:44:56 PM
                 ; * Author: omidt
                 ; */
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;unsigned char scan[4]={0XFE,0XFD,0XFB,0XF7};
                 
                 	.DSEG
                 ;char Key, State=0, Operand;
                 ;char Buf1[5], Buf0[5],Buf[16];
                 ;int Num0=0, Num1=0, Result;
                 ;char arrkey[16]=
                 ;{
                 ; '1','2','3','/',
                 ; '4','5','6','*',
                 ; '7','8','9','-',
                 ; 'C','0','=','+'
                 ;};
                 ;
                 ;#define c1 PINB.4
                 ;#define c2 PINB.5
                 ;#define c3 PINB.6
                 ;#define c4 PINB.7
                 ;#define keypad_port PORTB
                 ;
                 ;char keypad(){
                 ; 0000 001E char keypad(){
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 001F     unsigned char r,c,k;
                 ; 0000 0020     DDRB=0X0F;
000089 940e 04ca 	CALL __SAVELOCR4
                 ;	r -> R17
                 ;	c -> R16
                 ;	k -> R19
00008b e0ef      	LDI  R30,LOW(15)
00008c bbe7      	OUT  0x17,R30
                 ; 0000 0021     keypad_port=0XFF;
00008d efef      	LDI  R30,LOW(255)
00008e bbe8      	OUT  0x18,R30
                 ; 0000 0022     while(1){
                 _0x5:
                 ; 0000 0023         for (r=0; r<4; r++){
00008f e010      	LDI  R17,LOW(0)
                 _0x9:
000090 3014      	CPI  R17,4
000091 f578      	BRSH _0xA
                 ; 0000 0024             c=255;
000092 ef0f      	LDI  R16,LOW(255)
                 ; 0000 0025             keypad_port=scan[r];
000093 2fe1      	MOV  R30,R17
000094 e0f0      	LDI  R31,0
000095 59e6      	SUBI R30,LOW(-_scan)
000096 4ffd      	SBCI R31,HIGH(-_scan)
000097 81e0      	LD   R30,Z
000098 bbe8      	OUT  0x18,R30
                 ; 0000 0026             delay_us(10);
                +
000099 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00009a 958a     +DEC R24
00009b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0027             if(c1==0) c=0; if(c2==0) c=1; if(c3==0) c=2; if(c4==0) c=3;
00009c 9bb4      	SBIS 0x16,4
00009d e000      	LDI  R16,LOW(0)
00009e 9bb5      	SBIS 0x16,5
00009f e001      	LDI  R16,LOW(1)
0000a0 9bb6      	SBIS 0x16,6
0000a1 e002      	LDI  R16,LOW(2)
0000a2 9bb7      	SBIS 0x16,7
0000a3 e003      	LDI  R16,LOW(3)
                 ; 0000 0028             if (c!=255){
0000a4 3f0f      	CPI  R16,255
0000a5 f0c9      	BREQ _0xF
                 ; 0000 0029                 k=arrkey[(r*4)+c];
0000a6 e0e4      	LDI  R30,LOW(4)
0000a7 9fe1      	MUL  R30,R17
0000a8 01f0      	MOVW R30,R0
0000a9 01df      	MOVW R26,R30
0000aa 2fe0      	MOV  R30,R16
0000ab e0f0      	LDI  R31,0
0000ac 0fea      	ADD  R30,R26
0000ad 1ffb      	ADC  R31,R27
0000ae 57e8      	SUBI R30,LOW(-_arrkey)
0000af 4ffd      	SBCI R31,HIGH(-_arrkey)
0000b0 8130      	LD   R19,Z
                 ; 0000 002A                 while(c1==0); while(c2==0); while(c3==0); while(c4==0);
                 _0x10:
0000b1 9bb4      	SBIS 0x16,4
0000b2 cffe      	RJMP _0x10
                 _0x13:
0000b3 9bb5      	SBIS 0x16,5
0000b4 cffe      	RJMP _0x13
                 _0x16:
0000b5 9bb6      	SBIS 0x16,6
0000b6 cffe      	RJMP _0x16
                 _0x19:
0000b7 9bb7      	SBIS 0x16,7
0000b8 cffe      	RJMP _0x19
                 ; 0000 002B                 delay_ms(50);
0000b9 e3a2      	LDI  R26,LOW(50)
0000ba e0b0      	LDI  R27,0
0000bb 940e 046c 	CALL _delay_ms
                 ; 0000 002C                 return k;
0000bd 2fe3      	MOV  R30,R19
0000be c003      	RJMP _0x2080003
                 ; 0000 002D             }
                 ; 0000 002E         }
                 _0xF:
0000bf 5f1f      	SUBI R17,-1
0000c0 cfcf      	RJMP _0x9
                 _0xA:
                 ; 0000 002F     }
0000c1 cfcd      	RJMP _0x5
                 ; 0000 0030 }
                 _0x2080003:
0000c2 940e 04d1 	CALL __LOADLOCR4
0000c4 9624      	ADIW R28,4
0000c5 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0033 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0034     lcd_init(16);
0000c6 e1a0      	LDI  R26,LOW(16)
0000c7 d137      	RCALL _lcd_init
                 ; 0000 0035     lcd_clear();
0000c8 d0fe      	RCALL _lcd_clear
                 ; 0000 0036     lcd_puts("Start");
                +
0000c9 e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
0000ca e0b2     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
0000cb d122      	RCALL _lcd_puts
                 ; 0000 0037     delay_ms(1000);
0000cc eea8      	LDI  R26,LOW(1000)
0000cd e0b3      	LDI  R27,HIGH(1000)
0000ce 940e 046c 	CALL _delay_ms
                 ; 0000 0038     lcd_clear();
0000d0 d0f6      	RCALL _lcd_clear
                 ; 0000 0039     while (1)
                 _0x1D:
                 ; 0000 003A     {
                 ; 0000 003B         Key=keypad();
0000d1 dfb7      	RCALL _keypad
0000d2 2e5e      	MOV  R5,R30
                 ; 0000 003C         switch (State)
0000d3 2de4      	MOV  R30,R4
0000d4 e0f0      	LDI  R31,0
                 ; 0000 003D         {
                 ; 0000 003E             case 0:
0000d5 9730      	SBIW R30,0
0000d6 f559      	BRNE _0x23
                 ; 0000 003F             if (Key == 'C')
0000d7 e4e3      	LDI  R30,LOW(67)
0000d8 15e5      	CP   R30,R5
0000d9 f419      	BRNE _0x24
                 ; 0000 0040             {
                 ; 0000 0041                 Num0=0; Num1=0; Operand=''; lcd_clear(); lcd_putchar('0');
0000da 940e 03ee 	CALL SUBOPT_0x0
                 ; 0000 0042             }
                 ; 0000 0043             else if ((Key == '+') | (Key == '-') | (Key == '/') | (Key == '*'))
0000dc c024      	RJMP _0x25
                 _0x24:
0000dd 2da5      	MOV  R26,R5
0000de e2eb      	LDI  R30,LOW(43)
0000df 940e 0483 	CALL __EQB12
0000e1 2e0e      	MOV  R0,R30
0000e2 e2ed      	LDI  R30,LOW(45)
0000e3 940e 03f8 	CALL SUBOPT_0x1
0000e5 e2ef      	LDI  R30,LOW(47)
0000e6 940e 03f8 	CALL SUBOPT_0x1
0000e8 e2ea      	LDI  R30,LOW(42)
0000e9 940e 0483 	CALL __EQB12
0000eb 29e0      	OR   R30,R0
0000ec f059      	BREQ _0x26
                 ; 0000 0044             {
                 ; 0000 0045                 Operand = Key; lcd_clear(); lcd_puts(Buf1);
0000ed 2c75      	MOV  R7,R5
0000ee d0d8      	RCALL _lcd_clear
0000ef 940e 03fd 	CALL SUBOPT_0x2
                 ; 0000 0046                 lcd_putchar(' '); lcd_putchar(Key); lcd_putchar(' '); State =1;
0000f1 940e 0401 	CALL SUBOPT_0x3
0000f3 e2a0      	LDI  R26,LOW(32)
0000f4 d0df      	RCALL _lcd_putchar
0000f5 e0e1      	LDI  R30,LOW(1)
0000f6 2e4e      	MOV  R4,R30
                 ; 0000 0047             }
                 ; 0000 0048             else
0000f7 c009      	RJMP _0x27
                 _0x26:
                 ; 0000 0049             {
                 ; 0000 004A                 Num1 = Num1 * 10 + Key - 48; lcd_clear();
0000f8 01f5      	MOVW R30,R10
0000f9 940e 0407 	CALL SUBOPT_0x4
0000fb 015d      	MOVW R10,R26
0000fc d0ca      	RCALL _lcd_clear
                 ; 0000 004B                 sprintf(Buf1,"%d",Num1); lcd_puts(Buf1);
0000fd 940e 0411 	CALL SUBOPT_0x5
0000ff 940e 03fd 	CALL SUBOPT_0x2
                 ; 0000 004C             }
                 _0x27:
                 _0x25:
                 ; 0000 004D             break;
000101 c094      	RJMP _0x22
                 ; 0000 004E             case 1:
                 _0x23:
000102 30e1      	CPI  R30,LOW(0x1)
000103 e0a0      	LDI  R26,HIGH(0x1)
000104 07fa      	CPC  R31,R26
000105 f009      	BREQ PC+2
000106 c08f      	RJMP _0x22
                 ; 0000 004F             if (Key == 'C')
000107 e4e3      	LDI  R30,LOW(67)
000108 15e5      	CP   R30,R5
000109 f421      	BRNE _0x29
                 ; 0000 0050             {
                 ; 0000 0051                 Num0=0; Num1=0; Operand=''; lcd_clear(); lcd_putchar('0'); State = 0;
00010a 940e 03ee 	CALL SUBOPT_0x0
00010c 2444      	CLR  R4
                 ; 0000 0052             }
                 ; 0000 0053             else if ((Key == '1') | (Key == '2') | (Key == '3') | (Key == '4')| (Key == '5') | (Key == '6') | (Key == '7 ...
00010d c088      	RJMP _0x2A
                 _0x29:
                 ; 0000 0054                 | (Key == '9') | (Key == '0'))
00010e 2da5      	MOV  R26,R5
00010f e3e1      	LDI  R30,LOW(49)
000110 940e 0483 	CALL __EQB12
000112 2e0e      	MOV  R0,R30
000113 e3e2      	LDI  R30,LOW(50)
000114 940e 03f8 	CALL SUBOPT_0x1
000116 e3e3      	LDI  R30,LOW(51)
000117 940e 03f8 	CALL SUBOPT_0x1
000119 e3e4      	LDI  R30,LOW(52)
00011a 940e 03f8 	CALL SUBOPT_0x1
00011c e3e5      	LDI  R30,LOW(53)
00011d 940e 03f8 	CALL SUBOPT_0x1
00011f e3e6      	LDI  R30,LOW(54)
000120 940e 03f8 	CALL SUBOPT_0x1
000122 e3e7      	LDI  R30,LOW(55)
000123 940e 03f8 	CALL SUBOPT_0x1
000125 e3e8      	LDI  R30,LOW(56)
000126 940e 03f8 	CALL SUBOPT_0x1
000128 e3e9      	LDI  R30,LOW(57)
000129 940e 03f8 	CALL SUBOPT_0x1
00012b e3e0      	LDI  R30,LOW(48)
00012c 940e 0483 	CALL __EQB12
00012e 29e0      	OR   R30,R0
00012f f0d9      	BREQ _0x2B
                 ; 0000 0055             {
                 ; 0000 0056                 Num0 = Num0 * 10 + Key - 48; lcd_gotoxy(0,0); lcd_puts(Buf1);
000130 01f4      	MOVW R30,R8
000131 940e 0407 	CALL SUBOPT_0x4
000133 014d      	MOVW R8,R26
000134 e0e0      	LDI  R30,LOW(0)
000135 93ea      	ST   -Y,R30
000136 e0a0      	LDI  R26,LOW(0)
000137 d080      	RCALL _lcd_gotoxy
000138 940e 03fd 	CALL SUBOPT_0x2
                 ; 0000 0057                 lcd_putchar(' '); lcd_putchar(Operand); lcd_putchar(' ');
00013a e2a0      	LDI  R26,LOW(32)
00013b d098      	RCALL _lcd_putchar
00013c 2da7      	MOV  R26,R7
00013d d096      	RCALL _lcd_putchar
00013e e2a0      	LDI  R26,LOW(32)
00013f d094      	RCALL _lcd_putchar
                 ; 0000 0058                 sprintf(Buf0,"%d",Num0); lcd_puts(Buf0);
000140 e7e3      	LDI  R30,LOW(_Buf0)
000141 e0f2      	LDI  R31,HIGH(_Buf0)
000142 940e 0423 	CALL SUBOPT_0x6
000144 01f4      	MOVW R30,R8
000145 940e 042a 	CALL SUBOPT_0x7
000147 e7a3      	LDI  R26,LOW(_Buf0)
000148 e0b2      	LDI  R27,HIGH(_Buf0)
000149 d0a4      	RCALL _lcd_puts
                 ; 0000 0059             }
                 ; 0000 005A             else if (Key == '=')
00014a c04b      	RJMP _0x2C
                 _0x2B:
00014b e3ed      	LDI  R30,LOW(61)
00014c 15e5      	CP   R30,R5
00014d f009      	BREQ PC+2
00014e c047      	RJMP _0x2D
                 ; 0000 005B             {
                 ; 0000 005C                 lcd_putchar(' '); lcd_putchar(Key); lcd_gotoxy(0,1);
00014f 940e 0401 	CALL SUBOPT_0x3
000151 e0e0      	LDI  R30,LOW(0)
000152 93ea      	ST   -Y,R30
000153 e0a1      	LDI  R26,LOW(1)
000154 d063      	RCALL _lcd_gotoxy
                 ; 0000 005D                 if (Operand == '+')
000155 e2eb      	LDI  R30,LOW(43)
000156 15e7      	CP   R30,R7
000157 f421      	BRNE _0x2E
                 ; 0000 005E                 {
                 ; 0000 005F                     Result = Num1 + Num0; sprintf(Buf,"%d",Result); lcd_puts(Buf);
000158 01f4      	MOVW R30,R8
000159 0dea      	ADD  R30,R10
00015a 1dfb      	ADC  R31,R11
00015b c029      	RJMP _0x38
                 ; 0000 0060                 }
                 ; 0000 0061                 else if (Operand == '-')
                 _0x2E:
00015c e2ed      	LDI  R30,LOW(45)
00015d 15e7      	CP   R30,R7
00015e f421      	BRNE _0x30
                 ; 0000 0062                 {
                 ; 0000 0063                     Result = Num1 - Num0; sprintf(Buf,"%d",Result); lcd_puts(Buf);
00015f 01f5      	MOVW R30,R10
000160 19e8      	SUB  R30,R8
000161 09f9      	SBC  R31,R9
000162 c022      	RJMP _0x38
                 ; 0000 0064                 }
                 ; 0000 0065                 else if (Operand == '/')
                 _0x30:
000163 e2ef      	LDI  R30,LOW(47)
000164 15e7      	CP   R30,R7
000165 f4c1      	BRNE _0x32
                 ; 0000 0066                 {
                 ; 0000 0067                     if (Num0 == 0)
000166 2c08      	MOV  R0,R8
000167 2809      	OR   R0,R9
000168 f429      	BRNE _0x33
                 ; 0000 0068                     {
                 ; 0000 0069                         Result = 0; lcd_puts("Nan");
000169 24cc      	CLR  R12
00016a 24dd      	CLR  R13
                +
00016b e6a6     +LDI R26 , LOW ( _0x1C + ( 6 ) )
00016c e0b2     +LDI R27 , HIGH ( _0x1C + ( 6 ) )
                 	__POINTW2MN _0x1C,6
00016d c00e      	RJMP _0x39
                 ; 0000 006A                     }
                 ; 0000 006B                     else
                 _0x33:
                 ; 0000 006C                     {
                 ; 0000 006D                         Result = Num1 / Num0; sprintf(Buf,"%d",Result); lcd_puts(Buf);
00016e 01f4      	MOVW R30,R8
00016f 01d5      	MOVW R26,R10
000170 940e 04a8 	CALL __DIVW21
000172 016f      	MOVW R12,R30
000173 e7e8      	LDI  R30,LOW(_Buf)
000174 e0f2      	LDI  R31,HIGH(_Buf)
000175 940e 0423 	CALL SUBOPT_0x6
000177 01f6      	MOVW R30,R12
000178 940e 042a 	CALL SUBOPT_0x7
00017a e7a8      	LDI  R26,LOW(_Buf)
00017b e0b2      	LDI  R27,HIGH(_Buf)
                 _0x39:
00017c d071      	RCALL _lcd_puts
                 ; 0000 006E                     }
                 ; 0000 006F                 }
                 ; 0000 0070                 else if (Operand == '*')
00017d c012      	RJMP _0x35
                 _0x32:
00017e e2ea      	LDI  R30,LOW(42)
00017f 15e7      	CP   R30,R7
000180 f479      	BRNE _0x36
                 ; 0000 0071                 {
                 ; 0000 0072                     Result = Num1 * Num0 ; sprintf(Buf,"%d",Result); lcd_puts(Buf);
000181 01f4      	MOVW R30,R8
000182 01d5      	MOVW R26,R10
000183 940e 0490 	CALL __MULW12
                 _0x38:
000185 016f      	MOVW R12,R30
000186 e7e8      	LDI  R30,LOW(_Buf)
000187 e0f2      	LDI  R31,HIGH(_Buf)
000188 940e 0423 	CALL SUBOPT_0x6
00018a 01f6      	MOVW R30,R12
00018b 940e 042a 	CALL SUBOPT_0x7
00018d e7a8      	LDI  R26,LOW(_Buf)
00018e e0b2      	LDI  R27,HIGH(_Buf)
00018f d05e      	RCALL _lcd_puts
                 ; 0000 0073                 }
                 ; 0000 0074                     State = 0; Num0 = 0; Num1 = Result; sprintf(Buf1,"%d",Num1);
                 _0x36:
                 _0x35:
000190 2444      	CLR  R4
000191 2488      	CLR  R8
000192 2499      	CLR  R9
000193 0156      	MOVW R10,R12
000194 940e 0411 	CALL SUBOPT_0x5
                 ; 0000 0075             }
                 ; 0000 0076             break;
                 _0x2D:
                 _0x2C:
                 _0x2A:
                 ; 0000 0077         }
                 _0x22:
                 ; 0000 0078     }
000196 cf3a      	RJMP _0x1D
                 ; 0000 0079 }
                 _0x37:
000197 cfff      	RJMP _0x37
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000260           	.BYTE 0xA
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000198 93aa      	ST   -Y,R26
000199 b3eb      	IN   R30,0x1B
00019a 70ef      	ANDI R30,LOW(0xF)
00019b 2fae      	MOV  R26,R30
00019c 81e8      	LD   R30,Y
00019d 7fe0      	ANDI R30,LOW(0xF0)
00019e 2bea      	OR   R30,R26
00019f bbeb      	OUT  0x1B,R30
                +
0001a0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a1 958a     +DEC R24
0001a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a3 9ada      	SBI  0x1B,2
                +
0001a4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a7 98da      	CBI  0x1B,2
                +
0001a8 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a9 958a     +DEC R24
0001aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001ab c07f      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ac 93aa      	ST   -Y,R26
0001ad 81a8      	LD   R26,Y
0001ae dfe9      	RCALL __lcd_write_nibble_G100
0001af 81e8          ld    r30,y
0001b0 95e2          swap  r30
0001b1 83e8          st    y,r30
0001b2 81a8      	LD   R26,Y
0001b3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001b4 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001b5 958a     +DEC R24
0001b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001b7 c073      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b8 93aa      	ST   -Y,R26
0001b9 81e8      	LD   R30,Y
0001ba e0f0      	LDI  R31,0
0001bb 56e8      	SUBI R30,LOW(-__base_y_G100)
0001bc 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001bd 81e0      	LD   R30,Z
0001be 81a9      	LDD  R26,Y+1
0001bf 0fae      	ADD  R26,R30
0001c0 dfeb      	RCALL __lcd_write_data
0001c1 8069      	LDD  R6,Y+1
0001c2 81e8      	LD   R30,Y
0001c3 93e0 029c 	STS  __lcd_y,R30
0001c5 9622      	ADIW R28,2
0001c6 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c7 e0a2      	LDI  R26,LOW(2)
0001c8 940e 0433 	CALL SUBOPT_0x8
0001ca e0ac      	LDI  R26,LOW(12)
0001cb dfe0      	RCALL __lcd_write_data
0001cc e0a1      	LDI  R26,LOW(1)
0001cd 940e 0433 	CALL SUBOPT_0x8
0001cf e0e0      	LDI  R30,LOW(0)
0001d0 93e0 029c 	STS  __lcd_y,R30
0001d2 2e6e      	MOV  R6,R30
0001d3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d4 93aa      	ST   -Y,R26
0001d5 81a8      	LD   R26,Y
0001d6 30aa      	CPI  R26,LOW(0xA)
0001d7 f021      	BREQ _0x2000005
0001d8 91e0 029d 	LDS  R30,__lcd_maxx
0001da 166e      	CP   R6,R30
0001db f060      	BRLO _0x2000004
                 _0x2000005:
0001dc e0e0      	LDI  R30,LOW(0)
0001dd 93ea      	ST   -Y,R30
0001de 91a0 029c 	LDS  R26,__lcd_y
0001e0 5faf      	SUBI R26,-LOW(1)
0001e1 93a0 029c 	STS  __lcd_y,R26
0001e3 dfd4      	RCALL _lcd_gotoxy
0001e4 81a8      	LD   R26,Y
0001e5 30aa      	CPI  R26,LOW(0xA)
0001e6 f409      	BRNE _0x2000007
0001e7 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001e8 9463      	INC  R6
0001e9 9ad8      	SBI  0x1B,0
0001ea 81a8      	LD   R26,Y
0001eb dfc0      	RCALL __lcd_write_data
0001ec 98d8      	CBI  0x1B,0
0001ed c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ee 93ba      	ST   -Y,R27
0001ef 93aa      	ST   -Y,R26
0001f0 931a      	ST   -Y,R17
                 _0x2000008:
0001f1 81a9      	LDD  R26,Y+1
0001f2 81ba      	LDD  R27,Y+1+1
0001f3 91ed      	LD   R30,X+
0001f4 83a9      	STD  Y+1,R26
0001f5 83ba      	STD  Y+1+1,R27
0001f6 2f1e      	MOV  R17,R30
0001f7 30e0      	CPI  R30,0
0001f8 f019      	BREQ _0x200000A
0001f9 2fa1      	MOV  R26,R17
0001fa dfd9      	RCALL _lcd_putchar
0001fb cff5      	RJMP _0x2000008
                 _0x200000A:
0001fc 8118      	LDD  R17,Y+0
0001fd 9623      	ADIW R28,3
0001fe 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001ff 93aa      	ST   -Y,R26
000200 b3ea      	IN   R30,0x1A
000201 6fe0      	ORI  R30,LOW(0xF0)
000202 bbea      	OUT  0x1A,R30
000203 9ad2      	SBI  0x1A,2
000204 9ad0      	SBI  0x1A,0
000205 9ad1      	SBI  0x1A,1
000206 98da      	CBI  0x1B,2
000207 98d8      	CBI  0x1B,0
000208 98d9      	CBI  0x1B,1
000209 81e8      	LD   R30,Y
00020a 93e0 029d 	STS  __lcd_maxx,R30
00020c 58e0      	SUBI R30,-LOW(128)
                +
00020d 93e0 029a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00020f 81e8      	LD   R30,Y
000210 54e0      	SUBI R30,-LOW(192)
                +
000211 93e0 029b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000213 e1a4      	LDI  R26,LOW(20)
000214 e0b0      	LDI  R27,0
000215 940e 046c 	CALL _delay_ms
000217 940e 0439 	CALL SUBOPT_0x9
000219 940e 0439 	CALL SUBOPT_0x9
00021b 940e 0439 	CALL SUBOPT_0x9
00021d e2a0      	LDI  R26,LOW(32)
00021e df79      	RCALL __lcd_write_nibble_G100
                +
00021f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000220 958a     +DEC R24
000221 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000222 e2a8      	LDI  R26,LOW(40)
000223 df88      	RCALL __lcd_write_data
000224 e0a4      	LDI  R26,LOW(4)
000225 df86      	RCALL __lcd_write_data
000226 e8a5      	LDI  R26,LOW(133)
000227 df84      	RCALL __lcd_write_data
000228 e0a6      	LDI  R26,LOW(6)
000229 df82      	RCALL __lcd_write_data
00022a df9c      	RCALL _lcd_clear
                 _0x2080002:
00022b 9621      	ADIW R28,1
00022c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00022d 93ba      	ST   -Y,R27
00022e 93aa      	ST   -Y,R26
00022f 931a      	ST   -Y,R17
000230 930a      	ST   -Y,R16
000231 81aa      	LDD  R26,Y+2
000232 81bb      	LDD  R27,Y+2+1
000233 9612      	ADIW R26,2
000234 940e 04bb 	CALL __GETW1P
000236 9730      	SBIW R30,0
000237 f159      	BREQ _0x2020010
000238 81aa      	LDD  R26,Y+2
000239 81bb      	LDD  R27,Y+2+1
00023a 9614      	ADIW R26,4
00023b 940e 04bb 	CALL __GETW1P
00023d 018f      	MOVW R16,R30
00023e 9730      	SBIW R30,0
00023f f061      	BREQ _0x2020012
                +
000240 3002     +CPI R16 , LOW ( 2 )
000241 e0e0     +LDI R30 , HIGH ( 2 )
000242 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000243 f098      	BRLO _0x2020013
000244 01f8      	MOVW R30,R16
000245 9731      	SBIW R30,1
000246 018f      	MOVW R16,R30
                +
000247 81aa     +LDD R26 , Y + 2
000248 81bb     +LDD R27 , Y + 2 + 1
000249 9614     +ADIW R26 , 4
00024a 93ed     +ST X + , R30
00024b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00024c 81aa      	LDD  R26,Y+2
00024d 81bb      	LDD  R27,Y+2+1
00024e 9612      	ADIW R26,2
00024f 91ed      	LD   R30,X+
000250 91fd      	LD   R31,X+
000251 9631      	ADIW R30,1
000252 93fe      	ST   -X,R31
000253 93ee      	ST   -X,R30
000254 9731      	SBIW R30,1
000255 81ac      	LDD  R26,Y+4
000256 83a0      	STD  Z+0,R26
                 _0x2020013:
000257 81aa      	LDD  R26,Y+2
000258 81bb      	LDD  R27,Y+2+1
000259 940e 04bb 	CALL __GETW1P
00025b 23ff      	TST  R31
00025c f02a      	BRMI _0x2020014
00025d 91ed      	LD   R30,X+
00025e 91fd      	LD   R31,X+
00025f 9631      	ADIW R30,1
000260 93fe      	ST   -X,R31
000261 93ee      	ST   -X,R30
                 _0x2020014:
000262 c006      	RJMP _0x2020015
                 _0x2020010:
000263 81aa      	LDD  R26,Y+2
000264 81bb      	LDD  R27,Y+2+1
000265 efef      	LDI  R30,LOW(65535)
000266 efff      	LDI  R31,HIGH(65535)
000267 93ed      	ST   X+,R30
000268 93fc      	ST   X,R31
                 _0x2020015:
000269 8119      	LDD  R17,Y+1
00026a 8108      	LDD  R16,Y+0
00026b 9625      	ADIW R28,5
00026c 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00026d 93ba      	ST   -Y,R27
00026e 93aa      	ST   -Y,R26
00026f 9726      	SBIW R28,6
000270 940e 04c8 	CALL __SAVELOCR6
000272 e010      	LDI  R17,0
000273 85ac      	LDD  R26,Y+12
000274 85bd      	LDD  R27,Y+12+1
000275 e0e0      	LDI  R30,LOW(0)
000276 e0f0      	LDI  R31,HIGH(0)
000277 93ed      	ST   X+,R30
000278 93fc      	ST   X,R31
                 _0x2020016:
000279 89ea      	LDD  R30,Y+18
00027a 89fb      	LDD  R31,Y+18+1
00027b 9631      	ADIW R30,1
00027c 8bea      	STD  Y+18,R30
00027d 8bfb      	STD  Y+18+1,R31
00027e 9731      	SBIW R30,1
00027f 91e4      	LPM  R30,Z
000280 2f2e      	MOV  R18,R30
000281 30e0      	CPI  R30,0
000282 f409      	BRNE PC+2
000283 c115      	RJMP _0x2020018
000284 2fe1      	MOV  R30,R17
000285 30e0      	CPI  R30,0
000286 f439      	BRNE _0x202001C
000287 3225      	CPI  R18,37
000288 f411      	BRNE _0x202001D
000289 e011      	LDI  R17,LOW(1)
00028a c002      	RJMP _0x202001E
                 _0x202001D:
00028b 940e 0440 	CALL SUBOPT_0xA
                 _0x202001E:
00028d c10a      	RJMP _0x202001B
                 _0x202001C:
00028e 30e1      	CPI  R30,LOW(0x1)
00028f f4a9      	BRNE _0x202001F
000290 3225      	CPI  R18,37
000291 f419      	BRNE _0x2020020
000292 940e 0440 	CALL SUBOPT_0xA
000294 c102      	RJMP _0x20200CC
                 _0x2020020:
000295 e012      	LDI  R17,LOW(2)
000296 e040      	LDI  R20,LOW(0)
000297 e000      	LDI  R16,LOW(0)
000298 322d      	CPI  R18,45
000299 f411      	BRNE _0x2020021
00029a e001      	LDI  R16,LOW(1)
00029b c0fc      	RJMP _0x202001B
                 _0x2020021:
00029c 322b      	CPI  R18,43
00029d f411      	BRNE _0x2020022
00029e e24b      	LDI  R20,LOW(43)
00029f c0f8      	RJMP _0x202001B
                 _0x2020022:
0002a0 3220      	CPI  R18,32
0002a1 f411      	BRNE _0x2020023
0002a2 e240      	LDI  R20,LOW(32)
0002a3 c0f4      	RJMP _0x202001B
                 _0x2020023:
0002a4 c002      	RJMP _0x2020024
                 _0x202001F:
0002a5 30e2      	CPI  R30,LOW(0x2)
0002a6 f439      	BRNE _0x2020025
                 _0x2020024:
0002a7 e050      	LDI  R21,LOW(0)
0002a8 e013      	LDI  R17,LOW(3)
0002a9 3320      	CPI  R18,48
0002aa f411      	BRNE _0x2020026
0002ab 6800      	ORI  R16,LOW(128)
0002ac c0eb      	RJMP _0x202001B
                 _0x2020026:
0002ad c003      	RJMP _0x2020027
                 _0x2020025:
0002ae 30e3      	CPI  R30,LOW(0x3)
0002af f009      	BREQ PC+2
0002b0 c0e7      	RJMP _0x202001B
                 _0x2020027:
0002b1 3320      	CPI  R18,48
0002b2 f010      	BRLO _0x202002A
0002b3 332a      	CPI  R18,58
0002b4 f008      	BRLO _0x202002B
                 _0x202002A:
0002b5 c007      	RJMP _0x2020029
                 _0x202002B:
0002b6 e0aa      	LDI  R26,LOW(10)
0002b7 9f5a      	MUL  R21,R26
0002b8 2d50      	MOV  R21,R0
0002b9 2fe2      	MOV  R30,R18
0002ba 53e0      	SUBI R30,LOW(48)
0002bb 0f5e      	ADD  R21,R30
0002bc c0db      	RJMP _0x202001B
                 _0x2020029:
0002bd 2fe2      	MOV  R30,R18
0002be 36e3      	CPI  R30,LOW(0x63)
0002bf f449      	BRNE _0x202002F
0002c0 940e 0447 	CALL SUBOPT_0xB
0002c2 89e8      	LDD  R30,Y+16
0002c3 89f9      	LDD  R31,Y+16+1
0002c4 81a4      	LDD  R26,Z+4
0002c5 93aa      	ST   -Y,R26
0002c6 940e 044d 	CALL SUBOPT_0xC
0002c8 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002c9 37e3      	CPI  R30,LOW(0x73)
0002ca f441      	BRNE _0x2020032
0002cb 940e 0447 	CALL SUBOPT_0xB
0002cd 940e 0453 	CALL SUBOPT_0xD
0002cf 940e 03d5 	CALL _strlen
0002d1 2f1e      	MOV  R17,R30
0002d2 c00a      	RJMP _0x2020033
                 _0x2020032:
0002d3 37e0      	CPI  R30,LOW(0x70)
0002d4 f461      	BRNE _0x2020035
0002d5 940e 0447 	CALL SUBOPT_0xB
0002d7 940e 0453 	CALL SUBOPT_0xD
0002d9 940e 03e1 	CALL _strlenf
0002db 2f1e      	MOV  R17,R30
0002dc 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002dd 6002      	ORI  R16,LOW(2)
0002de 770f      	ANDI R16,LOW(127)
0002df e030      	LDI  R19,LOW(0)
0002e0 c034      	RJMP _0x2020036
                 _0x2020035:
0002e1 36e4      	CPI  R30,LOW(0x64)
0002e2 f011      	BREQ _0x2020039
0002e3 36e9      	CPI  R30,LOW(0x69)
0002e4 f411      	BRNE _0x202003A
                 _0x2020039:
0002e5 6004      	ORI  R16,LOW(4)
0002e6 c002      	RJMP _0x202003B
                 _0x202003A:
0002e7 37e5      	CPI  R30,LOW(0x75)
0002e8 f431      	BRNE _0x202003C
                 _0x202003B:
0002e9 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002ea e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002eb 83ee      	STD  Y+6,R30
0002ec 83ff      	STD  Y+6+1,R31
0002ed e015      	LDI  R17,LOW(5)
0002ee c00c      	RJMP _0x202003D
                 _0x202003C:
0002ef 35e8      	CPI  R30,LOW(0x58)
0002f0 f411      	BRNE _0x202003F
0002f1 6008      	ORI  R16,LOW(8)
0002f2 c003      	RJMP _0x2020040
                 _0x202003F:
0002f3 37e8      	CPI  R30,LOW(0x78)
0002f4 f009      	BREQ PC+2
0002f5 c0a1      	RJMP _0x2020071
                 _0x2020040:
0002f6 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002f7 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002f8 83ee      	STD  Y+6,R30
0002f9 83ff      	STD  Y+6+1,R31
0002fa e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002fb ff02      	SBRS R16,2
0002fc c014      	RJMP _0x2020042
0002fd 940e 0447 	CALL SUBOPT_0xB
0002ff 940e 045d 	CALL SUBOPT_0xE
000301 85ab      	LDD  R26,Y+11
000302 23aa      	TST  R26
000303 f43a      	BRPL _0x2020043
000304 85ea      	LDD  R30,Y+10
000305 85fb      	LDD  R31,Y+10+1
000306 940e 047a 	CALL __ANEGW1
000308 87ea      	STD  Y+10,R30
000309 87fb      	STD  Y+10+1,R31
00030a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00030b 3040      	CPI  R20,0
00030c f011      	BREQ _0x2020044
00030d 5f1f      	SUBI R17,-LOW(1)
00030e c001      	RJMP _0x2020045
                 _0x2020044:
00030f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000310 c004      	RJMP _0x2020046
                 _0x2020042:
000311 940e 0447 	CALL SUBOPT_0xB
000313 940e 045d 	CALL SUBOPT_0xE
                 _0x2020046:
                 _0x2020036:
000315 fd00      	SBRC R16,0
000316 c011      	RJMP _0x2020047
                 _0x2020048:
000317 1715      	CP   R17,R21
000318 f478      	BRSH _0x202004A
000319 ff07      	SBRS R16,7
00031a c008      	RJMP _0x202004B
00031b ff02      	SBRS R16,2
00031c c004      	RJMP _0x202004C
00031d 7f0b      	ANDI R16,LOW(251)
00031e 2f24      	MOV  R18,R20
00031f 5011      	SUBI R17,LOW(1)
000320 c001      	RJMP _0x202004D
                 _0x202004C:
000321 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000322 c001      	RJMP _0x202004E
                 _0x202004B:
000323 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000324 940e 0440 	CALL SUBOPT_0xA
000326 5051      	SUBI R21,LOW(1)
000327 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000328 2f31      	MOV  R19,R17
000329 ff01      	SBRS R16,1
00032a c017      	RJMP _0x202004F
                 _0x2020050:
00032b 3030      	CPI  R19,0
00032c f0a1      	BREQ _0x2020052
00032d ff03      	SBRS R16,3
00032e c006      	RJMP _0x2020053
00032f 81ee      	LDD  R30,Y+6
000330 81ff      	LDD  R31,Y+6+1
000331 9125      	LPM  R18,Z+
000332 83ee      	STD  Y+6,R30
000333 83ff      	STD  Y+6+1,R31
000334 c005      	RJMP _0x2020054
                 _0x2020053:
000335 81ae      	LDD  R26,Y+6
000336 81bf      	LDD  R27,Y+6+1
000337 912d      	LD   R18,X+
000338 83ae      	STD  Y+6,R26
000339 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00033a 940e 0440 	CALL SUBOPT_0xA
00033c 3050      	CPI  R21,0
00033d f009      	BREQ _0x2020055
00033e 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00033f 5031      	SUBI R19,LOW(1)
000340 cfea      	RJMP _0x2020050
                 _0x2020052:
000341 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000342 e320      	LDI  R18,LOW(48)
000343 81ee      	LDD  R30,Y+6
000344 81ff      	LDD  R31,Y+6+1
000345 940e 04bf 	CALL __GETW1PF
000347 87e8      	STD  Y+8,R30
000348 87f9      	STD  Y+8+1,R31
000349 81ee      	LDD  R30,Y+6
00034a 81ff      	LDD  R31,Y+6+1
00034b 9632      	ADIW R30,2
00034c 83ee      	STD  Y+6,R30
00034d 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00034e 85e8      	LDD  R30,Y+8
00034f 85f9      	LDD  R31,Y+8+1
000350 85aa      	LDD  R26,Y+10
000351 85bb      	LDD  R27,Y+10+1
000352 17ae      	CP   R26,R30
000353 07bf      	CPC  R27,R31
000354 f050      	BRLO _0x202005C
000355 5f2f      	SUBI R18,-LOW(1)
000356 85a8      	LDD  R26,Y+8
000357 85b9      	LDD  R27,Y+8+1
000358 85ea      	LDD  R30,Y+10
000359 85fb      	LDD  R31,Y+10+1
00035a 1bea      	SUB  R30,R26
00035b 0bfb      	SBC  R31,R27
00035c 87ea      	STD  Y+10,R30
00035d 87fb      	STD  Y+10+1,R31
00035e cfef      	RJMP _0x202005A
                 _0x202005C:
00035f 332a      	CPI  R18,58
000360 f028      	BRLO _0x202005D
000361 ff03      	SBRS R16,3
000362 c002      	RJMP _0x202005E
000363 5f29      	SUBI R18,-LOW(7)
000364 c001      	RJMP _0x202005F
                 _0x202005E:
000365 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000366 fd04      	SBRC R16,4
000367 c01a      	RJMP _0x2020061
000368 3321      	CPI  R18,49
000369 f420      	BRSH _0x2020063
00036a 85a8      	LDD  R26,Y+8
00036b 85b9      	LDD  R27,Y+8+1
00036c 9711      	SBIW R26,1
00036d f409      	BRNE _0x2020062
                 _0x2020063:
00036e c009      	RJMP _0x20200CD
                 _0x2020062:
00036f 1753      	CP   R21,R19
000370 f010      	BRLO _0x2020067
000371 ff00      	SBRS R16,0
000372 c001      	RJMP _0x2020068
                 _0x2020067:
000373 c013      	RJMP _0x2020066
                 _0x2020068:
000374 e220      	LDI  R18,LOW(32)
000375 ff07      	SBRS R16,7
000376 c00b      	RJMP _0x2020069
000377 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000378 6100      	ORI  R16,LOW(16)
000379 ff02      	SBRS R16,2
00037a c007      	RJMP _0x202006A
00037b 7f0b      	ANDI R16,LOW(251)
00037c 934a      	ST   -Y,R20
00037d 940e 044d 	CALL SUBOPT_0xC
00037f 3050      	CPI  R21,0
000380 f009      	BREQ _0x202006B
000381 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000382 940e 0440 	CALL SUBOPT_0xA
000384 3050      	CPI  R21,0
000385 f009      	BREQ _0x202006C
000386 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000387 5031      	SUBI R19,LOW(1)
000388 85a8      	LDD  R26,Y+8
000389 85b9      	LDD  R27,Y+8+1
00038a 9712      	SBIW R26,2
00038b f008      	BRLO _0x2020059
00038c cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00038d ff00      	SBRS R16,0
00038e c008      	RJMP _0x202006D
                 _0x202006E:
00038f 3050      	CPI  R21,0
000390 f031      	BREQ _0x2020070
000391 5051      	SUBI R21,LOW(1)
000392 e2e0      	LDI  R30,LOW(32)
000393 93ea      	ST   -Y,R30
000394 940e 044d 	CALL SUBOPT_0xC
000396 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000397 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000398 cee0      	RJMP _0x2020016
                 _0x2020018:
000399 85ac      	LDD  R26,Y+12
00039a 85bd      	LDD  R27,Y+12+1
00039b 940e 04bb 	CALL __GETW1P
00039d 940e 04cf 	CALL __LOADLOCR6
00039f 9664      	ADIW R28,20
0003a0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003a1 92ff      	PUSH R15
0003a2 2ef8      	MOV  R15,R24
0003a3 9726      	SBIW R28,6
0003a4 940e 04ca 	CALL __SAVELOCR4
0003a6 940e 0465 	CALL SUBOPT_0xF
0003a8 9730      	SBIW R30,0
0003a9 f419      	BRNE _0x2020072
0003aa efef      	LDI  R30,LOW(65535)
0003ab efff      	LDI  R31,HIGH(65535)
0003ac c023      	RJMP _0x2080001
                 _0x2020072:
0003ad 01de      	MOVW R26,R28
0003ae 9616      	ADIW R26,6
0003af 940e 0476 	CALL __ADDW2R15
0003b1 018d      	MOVW R16,R26
0003b2 940e 0465 	CALL SUBOPT_0xF
0003b4 83ee      	STD  Y+6,R30
0003b5 83ff      	STD  Y+6+1,R31
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 87e8      	STD  Y+8,R30
0003b8 87e9      	STD  Y+8+1,R30
0003b9 01de      	MOVW R26,R28
0003ba 961a      	ADIW R26,10
0003bb 940e 0476 	CALL __ADDW2R15
0003bd 940e 04bb 	CALL __GETW1P
0003bf 93fa      	ST   -Y,R31
0003c0 93ea      	ST   -Y,R30
0003c1 931a      	ST   -Y,R17
0003c2 930a      	ST   -Y,R16
0003c3 e2ed      	LDI  R30,LOW(_put_buff_G101)
0003c4 e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003c5 93fa      	ST   -Y,R31
0003c6 93ea      	ST   -Y,R30
0003c7 01de      	MOVW R26,R28
0003c8 961a      	ADIW R26,10
0003c9 dea3      	RCALL __print_G101
0003ca 019f      	MOVW R18,R30
0003cb 81ae      	LDD  R26,Y+6
0003cc 81bf      	LDD  R27,Y+6+1
0003cd e0e0      	LDI  R30,LOW(0)
0003ce 93ec      	ST   X,R30
0003cf 01f9      	MOVW R30,R18
                 _0x2080001:
0003d0 940e 04d1 	CALL __LOADLOCR4
0003d2 962a      	ADIW R28,10
0003d3 90ff      	POP  R15
0003d4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003d5 93ba      	ST   -Y,R27
0003d6 93aa      	ST   -Y,R26
0003d7 91a9          ld   r26,y+
0003d8 91b9          ld   r27,y+
0003d9 27ee          clr  r30
0003da 27ff          clr  r31
                 strlen0:
0003db 916d          ld   r22,x+
0003dc 2366          tst  r22
0003dd f011          breq strlen1
0003de 9631          adiw r30,1
0003df cffb          rjmp strlen0
                 strlen1:
0003e0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003e1 93ba      	ST   -Y,R27
0003e2 93aa      	ST   -Y,R26
0003e3 27aa          clr  r26
0003e4 27bb          clr  r27
0003e5 91e9          ld   r30,y+
0003e6 91f9          ld   r31,y+
                 strlenf0:
0003e7 9005      	lpm  r0,z+
0003e8 2000          tst  r0
0003e9 f011          breq strlenf1
0003ea 9611          adiw r26,1
0003eb cffb          rjmp strlenf0
                 strlenf1:
0003ec 01fd          movw r30,r26
0003ed 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _scan:
00026a           	.BYTE 0x4
                 _Buf1:
00026e           	.BYTE 0x5
                 _Buf0:
000273           	.BYTE 0x5
                 _Buf:
000278           	.BYTE 0x10
                 _arrkey:
000288           	.BYTE 0x10
                 __base_y_G100:
000298           	.BYTE 0x4
                 __lcd_y:
00029c           	.BYTE 0x1
                 __lcd_maxx:
00029d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0003ee 2488      	CLR  R8
0003ef 2499      	CLR  R9
0003f0 24aa      	CLR  R10
0003f1 24bb      	CLR  R11
0003f2 2477      	CLR  R7
0003f3 940e 01c7 	CALL _lcd_clear
0003f5 e3a0      	LDI  R26,LOW(48)
0003f6 940c 01d4 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
0003f8 940e 0483 	CALL __EQB12
0003fa 2a0e      	OR   R0,R30
0003fb 2da5      	MOV  R26,R5
0003fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003fd e6ae      	LDI  R26,LOW(_Buf1)
0003fe e0b2      	LDI  R27,HIGH(_Buf1)
0003ff 940c 01ee 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000401 e2a0      	LDI  R26,LOW(32)
000402 940e 01d4 	CALL _lcd_putchar
000404 2da5      	MOV  R26,R5
000405 940c 01d4 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000407 e0aa      	LDI  R26,LOW(10)
000408 e0b0      	LDI  R27,HIGH(10)
000409 940e 0490 	CALL __MULW12
00040b 01df      	MOVW R26,R30
00040c 27ee      	CLR  R30
00040d 0da5      	ADD  R26,R5
00040e 1fbe      	ADC  R27,R30
00040f 97d0      	SBIW R26,48
000410 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
000411 e6ee      	LDI  R30,LOW(_Buf1)
000412 e0f2      	LDI  R31,HIGH(_Buf1)
000413 93fa      	ST   -Y,R31
000414 93ea      	ST   -Y,R30
                +
000415 e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
000416 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
000417 93fa      	ST   -Y,R31
000418 93ea      	ST   -Y,R30
000419 01f5      	MOVW R30,R10
00041a 940e 047e 	CALL __CWD1
00041c 940e 04c3 	CALL __PUTPARD1
00041e e084      	LDI  R24,4
00041f 940e 03a1 	CALL _sprintf
000421 9628      	ADIW R28,8
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000423 93fa      	ST   -Y,R31
000424 93ea      	ST   -Y,R30
                +
000425 e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
000426 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
000427 93fa      	ST   -Y,R31
000428 93ea      	ST   -Y,R30
000429 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00042a 940e 047e 	CALL __CWD1
00042c 940e 04c3 	CALL __PUTPARD1
00042e e084      	LDI  R24,4
00042f 940e 03a1 	CALL _sprintf
000431 9628      	ADIW R28,8
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000433 940e 01ac 	CALL __lcd_write_data
000435 e0a3      	LDI  R26,LOW(3)
000436 e0b0      	LDI  R27,0
000437 940c 046c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000439 e3a0      	LDI  R26,LOW(48)
00043a 940e 0198 	CALL __lcd_write_nibble_G100
                +
00043c e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00043d 958a     +DEC R24
00043e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00043f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000440 932a      	ST   -Y,R18
000441 85ad      	LDD  R26,Y+13
000442 85be      	LDD  R27,Y+13+1
000443 85ef      	LDD  R30,Y+15
000444 89f8      	LDD  R31,Y+15+1
000445 9509      	ICALL
000446 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
000447 89e8      	LDD  R30,Y+16
000448 89f9      	LDD  R31,Y+16+1
000449 9734      	SBIW R30,4
00044a 8be8      	STD  Y+16,R30
00044b 8bf9      	STD  Y+16+1,R31
00044c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00044d 85ad      	LDD  R26,Y+13
00044e 85be      	LDD  R27,Y+13+1
00044f 85ef      	LDD  R30,Y+15
000450 89f8      	LDD  R31,Y+15+1
000451 9509      	ICALL
000452 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000453 89a8      	LDD  R26,Y+16
000454 89b9      	LDD  R27,Y+16+1
000455 9614      	ADIW R26,4
000456 940e 04bb 	CALL __GETW1P
000458 83ee      	STD  Y+6,R30
000459 83ff      	STD  Y+6+1,R31
00045a 81ae      	LDD  R26,Y+6
00045b 81bf      	LDD  R27,Y+6+1
00045c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00045d 89a8      	LDD  R26,Y+16
00045e 89b9      	LDD  R27,Y+16+1
00045f 9614      	ADIW R26,4
000460 940e 04bb 	CALL __GETW1P
000462 87ea      	STD  Y+10,R30
000463 87fb      	STD  Y+10+1,R31
000464 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000465 01de      	MOVW R26,R28
000466 961c      	ADIW R26,12
000467 940e 0476 	CALL __ADDW2R15
000469 940e 04bb 	CALL __GETW1P
00046b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00046c 9610      	adiw r26,0
00046d f039      	breq __delay_ms1
                 __delay_ms0:
00046e 95a8      	wdr
                +
00046f ef8a     +LDI R24 , LOW ( 0xFA )
000470 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000471 9701     +SBIW R24 , 1
000472 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000473 9711      	sbiw r26,1
000474 f7c9      	brne __delay_ms0
                 __delay_ms1:
000475 9508      	ret
                 
                 __ADDW2R15:
000476 2400      	CLR  R0
000477 0daf      	ADD  R26,R15
000478 1db0      	ADC  R27,R0
000479 9508      	RET
                 
                 __ANEGW1:
00047a 95f1      	NEG  R31
00047b 95e1      	NEG  R30
00047c 40f0      	SBCI R31,0
00047d 9508      	RET
                 
                 __CWD1:
00047e 2f6f      	MOV  R22,R31
00047f 0f66      	ADD  R22,R22
000480 0b66      	SBC  R22,R22
000481 2f76      	MOV  R23,R22
000482 9508      	RET
                 
                 __EQB12:
000483 17ea      	CP   R30,R26
000484 e0e1      	LDI  R30,1
000485 f009      	BREQ __EQB12T
000486 27ee      	CLR  R30
                 __EQB12T:
000487 9508      	RET
                 
                 __MULW12U:
000488 9ffa      	MUL  R31,R26
000489 2df0      	MOV  R31,R0
00048a 9feb      	MUL  R30,R27
00048b 0df0      	ADD  R31,R0
00048c 9fea      	MUL  R30,R26
00048d 2de0      	MOV  R30,R0
00048e 0df1      	ADD  R31,R1
00048f 9508      	RET
                 
                 __MULW12:
000490 d01c      	RCALL __CHKSIGNW
000491 dff6      	RCALL __MULW12U
000492 f40e      	BRTC __MULW121
000493 dfe6      	RCALL __ANEGW1
                 __MULW121:
000494 9508      	RET
                 
                 __DIVW21U:
000495 2400      	CLR  R0
000496 2411      	CLR  R1
000497 e190      	LDI  R25,16
                 __DIVW21U1:
000498 0faa      	LSL  R26
000499 1fbb      	ROL  R27
00049a 1c00      	ROL  R0
00049b 1c11      	ROL  R1
00049c 1a0e      	SUB  R0,R30
00049d 0a1f      	SBC  R1,R31
00049e f418      	BRCC __DIVW21U2
00049f 0e0e      	ADD  R0,R30
0004a0 1e1f      	ADC  R1,R31
0004a1 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004a2 60a1      	SBR  R26,1
                 __DIVW21U3:
0004a3 959a      	DEC  R25
0004a4 f799      	BRNE __DIVW21U1
0004a5 01fd      	MOVW R30,R26
0004a6 01d0      	MOVW R26,R0
0004a7 9508      	RET
                 
                 __DIVW21:
0004a8 d004      	RCALL __CHKSIGNW
0004a9 dfeb      	RCALL __DIVW21U
0004aa f40e      	BRTC __DIVW211
0004ab dfce      	RCALL __ANEGW1
                 __DIVW211:
0004ac 9508      	RET
                 
                 __CHKSIGNW:
0004ad 94e8      	CLT
0004ae fff7      	SBRS R31,7
0004af c002      	RJMP __CHKSW1
0004b0 dfc9      	RCALL __ANEGW1
0004b1 9468      	SET
                 __CHKSW1:
0004b2 ffb7      	SBRS R27,7
0004b3 c006      	RJMP __CHKSW2
0004b4 95a0      	COM  R26
0004b5 95b0      	COM  R27
0004b6 9611      	ADIW R26,1
0004b7 f800      	BLD  R0,0
0004b8 9403      	INC  R0
0004b9 fa00      	BST  R0,0
                 __CHKSW2:
0004ba 9508      	RET
                 
                 __GETW1P:
0004bb 91ed      	LD   R30,X+
0004bc 91fc      	LD   R31,X
0004bd 9711      	SBIW R26,1
0004be 9508      	RET
                 
                 __GETW1PF:
0004bf 9005      	LPM  R0,Z+
0004c0 91f4      	LPM  R31,Z
0004c1 2de0      	MOV  R30,R0
0004c2 9508      	RET
                 
                 __PUTPARD1:
0004c3 937a      	ST   -Y,R23
0004c4 936a      	ST   -Y,R22
0004c5 93fa      	ST   -Y,R31
0004c6 93ea      	ST   -Y,R30
0004c7 9508      	RET
                 
                 __SAVELOCR6:
0004c8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004c9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004ca 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004cb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004cc 931a      	ST   -Y,R17
0004cd 930a      	ST   -Y,R16
0004ce 9508      	RET
                 
                 __LOADLOCR6:
0004cf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004d0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004d1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004d2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004d3 8119      	LDD  R17,Y+1
0004d4 8108      	LD   R16,Y
0004d5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  30 r1 :   6 r2 :   0 r3 :   0 r4 :   4 r5 :  10 r6 :   4 r7 :   7 
r8 :  10 r9 :   4 r10:   9 r11:   2 r12:   6 r13:   1 r14:   0 r15:   4 
r16:  41 r17:  29 r18:  29 r19:  10 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  26 r25:   5 r26: 138 r27:  51 r28:  16 r29:   1 r30: 240 r31:  80 
x  :  23 y  : 170 z  :  17 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :  10 
adiw  :  27 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  40 brpl  :   1 brsh  :   3 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  93 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  22 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :  12 cpc   :   3 cpi   :  36 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  26 ld    :  28 ldd   :  75 ldi   : 153 
lds   :   2 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  34 movw  :  36 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   7 out   :  11 pop   :   1 push  :   1 rcall :  37 ret   :  37 
reti  :   0 rjmp  :  80 rol   :   3 ror   :   0 sbc   :   4 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   8 sbiw  :  19 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  31 sts   :   6 sub   :   3 subi  :  20 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 64 out of 116 (55.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009ac   2376    100   2476   32768   7.6%
[.dseg] 0x000060 0x00029e      0     62     62    2048   3.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
