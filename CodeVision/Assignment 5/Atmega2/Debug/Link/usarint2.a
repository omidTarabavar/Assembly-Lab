;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// Get a character from the USART Receiver
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012 char status,data;
; 0000 0013 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 0014       {
; 0000 0015       while (((status=UCSRA) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0016       data=UDR;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0017       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0018          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001A }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;unsigned char scan[4] = {0xFE, 0xFD, 0xFB, 0xF7};

	.DSEG
;char pressedKey = 0;
;char arrkey[16] = {
;    '7', '8', '9', '/',
;    '4', '5', '6', '*',
;    '1', '2', '3', '-',
;    'C', '0', '=', '+'
;};
;#define c1 PINB.4
;#define c2 PINB.5
;#define c3 PINB.6
;#define c4 PINB.7
;#define keypad_port PORTB
;
;void keypad()
; 0000 0030 {

	.CSEG
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0031     unsigned char r,c;
; 0000 0032     delay_us(10);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	r -> R17
;	c -> R16
;PCODE: $0000002B VOL: 0
; 0000 0033     for (r=0; r<4; r++){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0034             c=255;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0035             keypad_port=scan[r];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0036             delay_us(10);
;PCODE: $0000003C VOL: 0
; 0000 0037             if(c1==0) pressedKey=arrkey[(r*4)+0];
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0038             if(c2==0) pressedKey=arrkey[(r*4)+1];
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0039             if(c3==0) pressedKey=arrkey[(r*4)+2];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 003A             if(c4==0) pressedKey=arrkey[(r*4)+3];
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003B     }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003C }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;interrupt [2] void my_int()
; 0000 003F {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0040     #asm("cli")
;PCODE: $0000006B VOL: 0
	cli
;PCODE: $0000006C VOL: 0
; 0000 0041     keypad();
;PCODE: $0000006D VOL: 0
; 0000 0042     if(pressedKey != 0)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0043     {
; 0000 0044         putchar(pressedKey);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0045         pressedKey = 0;
;PCODE: $00000072 VOL: 0
; 0000 0046     }
; 0000 0047     DDRB=0X0F;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0048     keypad_port=0XF0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B     #asm ("sei")
;PCODE: $00000078 VOL: 0
	sei
;PCODE: $00000079 VOL: 0
; 0000 004C }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;
;
;void main(void)
; 0000 0051 {
;PCODE: $0000007D VOL: 0
; 0000 0052 // Declare your local variables here
; 0000 0053 
; 0000 0054 // Input/Output Ports initialization
; 0000 0055 // Port A initialization
; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0057 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0059 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005A 
; 0000 005B // Port B initialization
; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0060 
; 0000 0061 // Port C initialization
; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0063 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0065 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0066 
; 0000 0067 // Port D initialization
; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0069 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006C 
; 0000 006D // Timer/Counter 0 initialization
; 0000 006E // Clock source: System Clock
; 0000 006F // Clock value: Timer 0 Stopped
; 0000 0070 // Mode: Normal top=0xFF
; 0000 0071 // OC0 output: Disconnected
; 0000 0072 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0073 TCNT0=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0074 OCR0=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0075 
; 0000 0076 // Timer/Counter 1 initialization
; 0000 0077 // Clock source: System Clock
; 0000 0078 // Clock value: Timer1 Stopped
; 0000 0079 // Mode: Normal top=0xFFFF
; 0000 007A // OC1A output: Disconnected
; 0000 007B // OC1B output: Disconnected
; 0000 007C // Noise Canceler: Off
; 0000 007D // Input Capture on Falling Edge
; 0000 007E // Timer1 Overflow Interrupt: Off
; 0000 007F // Input Capture Interrupt: Off
; 0000 0080 // Compare A Match Interrupt: Off
; 0000 0081 // Compare B Match Interrupt: Off
; 0000 0082 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0083 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0084 TCNT1H=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0085 TCNT1L=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0086 ICR1H=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0087 ICR1L=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0088 OCR1AH=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0089 OCR1AL=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008A OCR1BH=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 008B OCR1BL=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 008C 
; 0000 008D // Timer/Counter 2 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: Timer2 Stopped
; 0000 0090 // Mode: Normal top=0xFF
; 0000 0091 // OC2 output: Disconnected
; 0000 0092 ASSR=0<<AS2;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0093 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0094 TCNT2=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0095 OCR2=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0096 
; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0098 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0099 
; 0000 009A // External Interrupt(s) initialization
; 0000 009B // INT0: Off
; 0000 009C // INT1: Off
; 0000 009D // INT2: Off
; 0000 009E MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 009F MCUCSR=(0<<ISC2);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00A0 
; 0000 00A1 // USART initialization
; 0000 00A2 // Communication Parameters: 7 Data, 1 Stop, Even Parity
; 0000 00A3 // USART Receiver: On
; 0000 00A4 // USART Transmitter: Off
; 0000 00A5 // USART Mode: Asynchronous
; 0000 00A6 // USART Baud Rate: 4800
; 0000 00A7 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A8 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00A9 UCSRC=(1<<URSEL) | (0<<UMSEL) | (1<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00AA UBRRH=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00AB UBRRL=0x0C;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00AC 
; 0000 00AD // Analog Comparator initialization
; 0000 00AE // Analog Comparator: Off
; 0000 00AF // The Analog Comparator's positive input is
; 0000 00B0 // connected to the AIN0 pin
; 0000 00B1 // The Analog Comparator's negative input is
; 0000 00B2 // connected to the AIN1 pin
; 0000 00B3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B4 SFIOR=(0<<ACME);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B5 
; 0000 00B6 // ADC initialization
; 0000 00B7 // ADC disabled
; 0000 00B8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00B9 
; 0000 00BA // SPI initialization
; 0000 00BB // SPI disabled
; 0000 00BC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00BD 
; 0000 00BE // TWI initialization
; 0000 00BF // TWI disabled
; 0000 00C0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00C1 
; 0000 00C2 lcd_init(16);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00C3     lcd_clear();
;PCODE: $000000CC VOL: 0
; 0000 00C4     lcd_puts("Start");
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C5     delay_ms(1000);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C6     lcd_clear();
;PCODE: $000000D2 VOL: 0
; 0000 00C7 
; 0000 00C8     #asm("sei")
;PCODE: $000000D3 VOL: 0
	sei
;PCODE: $000000D4 VOL: 0
; 0000 00C9     GICR |= (1 << INT0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00CA     MCUCR |= (1 << ISC01) | (0 << ISC00);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00CB     DDRB=0X0F;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00CC     keypad_port=0XF0;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00CD 
; 0000 00CE 
; 0000 00CF while (1)
;PCODE: $000000DF VOL: 0
; 0000 00D0       {
; 0000 00D1       // Place your code here
; 0000 00D2 
; 0000 00D3 
; 0000 00D4       }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00D5 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0

	.DSEG
_0x14:
	.BYTE 0x6
