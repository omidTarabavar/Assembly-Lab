
AVRASM ver. 2.1.30  D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm Tue Jan 28 00:54:44 2025

D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _pressedKey=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 00b6 	JMP  _my_int
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\Github\Assembly-Lab\CodeVision\Assignment 5\Atmega2\Debug\List\usarint2.asm(1130): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 _0xA:
000034 fdfe
000035 f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0xB:
000036 3837
000037 2f39
000038 3534
000039 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
00003a 3231
00003b 2d33
00003c 3043
00003d 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 _0x0:
00003e 7453
00003f 7261
000040 0074      	.DB  0x53,0x74,0x61,0x72,0x74,0x0
                 _0x2000003:
000041 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000042 0001      	.DW  0x01
000043 0005      	.DW  0x05
000044 0066      	.DW  __REG_VARS*2
                 
000045 0004      	.DW  0x04
000046 0266      	.DW  _scan
000047 0068      	.DW  _0xA*2
                 
000048 0010      	.DW  0x10
000049 026a      	.DW  _arrkey
00004a 006c      	.DW  _0xB*2
                 
00004b 0006      	.DW  0x06
00004c 0260      	.DW  _0x14
00004d 007c      	.DW  _0x0*2
                 
00004e 0002      	.DW  0x02
00004f 027a      	.DW  __base_y_G100
000050 0082      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 00de 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// Get a character from the USART Receiver
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0011 {
                 
                 	.CSEG
                 ; 0000 0012 char status,data;
                 ; 0000 0013 while (1)
                 ;	status -> R17
                 ;	data -> R16
                 ; 0000 0014       {
                 ; 0000 0015       while (((status=UCSRA) & RX_COMPLETE)==0);
                 ; 0000 0016       data=UDR;
                 ; 0000 0017       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ; 0000 0018          return data;
                 ; 0000 0019       }
                 ; 0000 001A }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;unsigned char scan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char pressedKey = 0;
                 ;char arrkey[16] = {
                 ;    '7', '8', '9', '/',
                 ;    '4', '5', '6', '*',
                 ;    '1', '2', '3', '-',
                 ;    'C', '0', '=', '+'
                 ;};
                 ;#define c1 PINB.4
                 ;#define c2 PINB.5
                 ;#define c3 PINB.6
                 ;#define c4 PINB.7
                 ;#define keypad_port PORTB
                 ;
                 ;void keypad()
                 ; 0000 0030 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0031     unsigned char r,c;
                 ; 0000 0032     delay_us(10);
00007f 931a      	ST   -Y,R17
000080 930a      	ST   -Y,R16
                 ;	r -> R17
                 ;	c -> R16
                +
000081 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000082 958a     +DEC R24
000083 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0033     for (r=0; r<4; r++){
000084 e010      	LDI  R17,LOW(0)
                 _0xD:
000085 3014      	CPI  R17,4
000086 f560      	BRSH _0xE
                 ; 0000 0034             c=255;
000087 ef0f      	LDI  R16,LOW(255)
                 ; 0000 0035             keypad_port=scan[r];
000088 2fe1      	MOV  R30,R17
000089 e0f0      	LDI  R31,0
00008a 59ea      	SUBI R30,LOW(-_scan)
00008b 4ffd      	SBCI R31,HIGH(-_scan)
00008c 81e0      	LD   R30,Z
00008d bbe8      	OUT  0x18,R30
                 ; 0000 0036             delay_us(10);
                +
00008e e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00008f 958a     +DEC R24
000090 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0037             if(c1==0) pressedKey=arrkey[(r*4)+0];
000091 99b4      	SBIC 0x16,4
000092 c006      	RJMP _0xF
000093 e0e4      	LDI  R30,LOW(4)
000094 9fe1      	MUL  R30,R17
000095 01f0      	MOVW R30,R0
                +
000096 59e6     +SUBI R30 , LOW ( - _arrkey - ( 0 ) )
000097 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 0 ) )
                 	__ADDW1MN _arrkey,0
000098 8050      	LD   R5,Z
                 ; 0000 0038             if(c2==0) pressedKey=arrkey[(r*4)+1];
                 _0xF:
000099 99b5      	SBIC 0x16,5
00009a c006      	RJMP _0x10
00009b e0e4      	LDI  R30,LOW(4)
00009c 9fe1      	MUL  R30,R17
00009d 01f0      	MOVW R30,R0
                +
00009e 59e5     +SUBI R30 , LOW ( - _arrkey - ( 1 ) )
00009f 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 1 ) )
                 	__ADDW1MN _arrkey,1
0000a0 8050      	LD   R5,Z
                 ; 0000 0039             if(c3==0) pressedKey=arrkey[(r*4)+2];
                 _0x10:
0000a1 99b6      	SBIC 0x16,6
0000a2 c006      	RJMP _0x11
0000a3 e0e4      	LDI  R30,LOW(4)
0000a4 9fe1      	MUL  R30,R17
0000a5 01f0      	MOVW R30,R0
                +
0000a6 59e4     +SUBI R30 , LOW ( - _arrkey - ( 2 ) )
0000a7 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 2 ) )
                 	__ADDW1MN _arrkey,2
0000a8 8050      	LD   R5,Z
                 ; 0000 003A             if(c4==0) pressedKey=arrkey[(r*4)+3];
                 _0x11:
0000a9 99b7      	SBIC 0x16,7
0000aa c006      	RJMP _0x12
0000ab e0e4      	LDI  R30,LOW(4)
0000ac 9fe1      	MUL  R30,R17
0000ad 01f0      	MOVW R30,R0
                +
0000ae 59e3     +SUBI R30 , LOW ( - _arrkey - ( 3 ) )
0000af 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 3 ) )
                 	__ADDW1MN _arrkey,3
0000b0 8050      	LD   R5,Z
                 ; 0000 003B     }
                 _0x12:
0000b1 5f1f      	SUBI R17,-1
0000b2 cfd2      	RJMP _0xD
                 _0xE:
                 ; 0000 003C }
0000b3 9109      	LD   R16,Y+
0000b4 9119      	LD   R17,Y+
0000b5 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [2] void my_int()
                 ; 0000 003F {
                 _my_int:
                 ; .FSTART _my_int
0000b6 920a      	ST   -Y,R0
0000b7 921a      	ST   -Y,R1
0000b8 92fa      	ST   -Y,R15
0000b9 936a      	ST   -Y,R22
0000ba 937a      	ST   -Y,R23
0000bb 938a      	ST   -Y,R24
0000bc 939a      	ST   -Y,R25
0000bd 93aa      	ST   -Y,R26
0000be 93ba      	ST   -Y,R27
0000bf 93ea      	ST   -Y,R30
0000c0 93fa      	ST   -Y,R31
0000c1 b7ef      	IN   R30,SREG
0000c2 93ea      	ST   -Y,R30
                 ; 0000 0040     #asm("cli")
0000c3 94f8      	cli
                 ; 0000 0041     keypad();
0000c4 dfba      	RCALL _keypad
                 ; 0000 0042     if(pressedKey != 0)
0000c5 2055      	TST  R5
0000c6 f021      	BREQ _0x13
                 ; 0000 0043     {
                 ; 0000 0044         putchar(pressedKey);
0000c7 2da5      	MOV  R26,R5
0000c8 940e 01b1 	CALL _putchar
                 ; 0000 0045         pressedKey = 0;
0000ca 2455      	CLR  R5
                 ; 0000 0046     }
                 ; 0000 0047     DDRB=0X0F;
                 _0x13:
0000cb e0ef      	LDI  R30,LOW(15)
0000cc bbe7      	OUT  0x17,R30
                 ; 0000 0048     keypad_port=0XF0;
0000cd efe0      	LDI  R30,LOW(240)
0000ce bbe8      	OUT  0x18,R30
                 ; 0000 0049 
                 ; 0000 004A 
                 ; 0000 004B     #asm ("sei")
0000cf 9478      	sei
                 ; 0000 004C }
0000d0 91e9      	LD   R30,Y+
0000d1 bfef      	OUT  SREG,R30
0000d2 91f9      	LD   R31,Y+
0000d3 91e9      	LD   R30,Y+
0000d4 91b9      	LD   R27,Y+
0000d5 91a9      	LD   R26,Y+
0000d6 9199      	LD   R25,Y+
0000d7 9189      	LD   R24,Y+
0000d8 9179      	LD   R23,Y+
0000d9 9169      	LD   R22,Y+
0000da 90f9      	LD   R15,Y+
0000db 9019      	LD   R1,Y+
0000dc 9009      	LD   R0,Y+
0000dd 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0051 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0052 // Declare your local variables here
                 ; 0000 0053 
                 ; 0000 0054 // Input/Output Ports initialization
                 ; 0000 0055 // Port A initialization
                 ; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0057 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000de e0e0      	LDI  R30,LOW(0)
0000df bbea      	OUT  0x1A,R30
                 ; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0059 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000e0 bbeb      	OUT  0x1B,R30
                 ; 0000 005A 
                 ; 0000 005B // Port B initialization
                 ; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000e1 bbe7      	OUT  0x17,R30
                 ; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000e2 bbe8      	OUT  0x18,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port C initialization
                 ; 0000 0062 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0063 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000e3 bbe4      	OUT  0x14,R30
                 ; 0000 0064 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0065 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000e4 bbe5      	OUT  0x15,R30
                 ; 0000 0066 
                 ; 0000 0067 // Port D initialization
                 ; 0000 0068 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0069 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000e5 bbe1      	OUT  0x11,R30
                 ; 0000 006A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e6 bbe2      	OUT  0x12,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer/Counter 0 initialization
                 ; 0000 006E // Clock source: System Clock
                 ; 0000 006F // Clock value: Timer 0 Stopped
                 ; 0000 0070 // Mode: Normal top=0xFF
                 ; 0000 0071 // OC0 output: Disconnected
                 ; 0000 0072 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e7 bfe3      	OUT  0x33,R30
                 ; 0000 0073 TCNT0=0x00;
0000e8 bfe2      	OUT  0x32,R30
                 ; 0000 0074 OCR0=0x00;
0000e9 bfec      	OUT  0x3C,R30
                 ; 0000 0075 
                 ; 0000 0076 // Timer/Counter 1 initialization
                 ; 0000 0077 // Clock source: System Clock
                 ; 0000 0078 // Clock value: Timer1 Stopped
                 ; 0000 0079 // Mode: Normal top=0xFFFF
                 ; 0000 007A // OC1A output: Disconnected
                 ; 0000 007B // OC1B output: Disconnected
                 ; 0000 007C // Noise Canceler: Off
                 ; 0000 007D // Input Capture on Falling Edge
                 ; 0000 007E // Timer1 Overflow Interrupt: Off
                 ; 0000 007F // Input Capture Interrupt: Off
                 ; 0000 0080 // Compare A Match Interrupt: Off
                 ; 0000 0081 // Compare B Match Interrupt: Off
                 ; 0000 0082 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ea bdef      	OUT  0x2F,R30
                 ; 0000 0083 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000eb bdee      	OUT  0x2E,R30
                 ; 0000 0084 TCNT1H=0x00;
0000ec bded      	OUT  0x2D,R30
                 ; 0000 0085 TCNT1L=0x00;
0000ed bdec      	OUT  0x2C,R30
                 ; 0000 0086 ICR1H=0x00;
0000ee bde7      	OUT  0x27,R30
                 ; 0000 0087 ICR1L=0x00;
0000ef bde6      	OUT  0x26,R30
                 ; 0000 0088 OCR1AH=0x00;
0000f0 bdeb      	OUT  0x2B,R30
                 ; 0000 0089 OCR1AL=0x00;
0000f1 bdea      	OUT  0x2A,R30
                 ; 0000 008A OCR1BH=0x00;
0000f2 bde9      	OUT  0x29,R30
                 ; 0000 008B OCR1BL=0x00;
0000f3 bde8      	OUT  0x28,R30
                 ; 0000 008C 
                 ; 0000 008D // Timer/Counter 2 initialization
                 ; 0000 008E // Clock source: System Clock
                 ; 0000 008F // Clock value: Timer2 Stopped
                 ; 0000 0090 // Mode: Normal top=0xFF
                 ; 0000 0091 // OC2 output: Disconnected
                 ; 0000 0092 ASSR=0<<AS2;
0000f4 bde2      	OUT  0x22,R30
                 ; 0000 0093 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f5 bde5      	OUT  0x25,R30
                 ; 0000 0094 TCNT2=0x00;
0000f6 bde4      	OUT  0x24,R30
                 ; 0000 0095 OCR2=0x00;
0000f7 bde3      	OUT  0x23,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0098 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f8 bfe9      	OUT  0x39,R30
                 ; 0000 0099 
                 ; 0000 009A // External Interrupt(s) initialization
                 ; 0000 009B // INT0: Off
                 ; 0000 009C // INT1: Off
                 ; 0000 009D // INT2: Off
                 ; 0000 009E MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000f9 e0e2      	LDI  R30,LOW(2)
0000fa bfe5      	OUT  0x35,R30
                 ; 0000 009F MCUCSR=(0<<ISC2);
0000fb e0e0      	LDI  R30,LOW(0)
0000fc bfe4      	OUT  0x34,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // USART initialization
                 ; 0000 00A2 // Communication Parameters: 7 Data, 1 Stop, Even Parity
                 ; 0000 00A3 // USART Receiver: On
                 ; 0000 00A4 // USART Transmitter: Off
                 ; 0000 00A5 // USART Mode: Asynchronous
                 ; 0000 00A6 // USART Baud Rate: 4800
                 ; 0000 00A7 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000fd b9eb      	OUT  0xB,R30
                 ; 0000 00A8 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000fe e0e8      	LDI  R30,LOW(8)
0000ff b9ea      	OUT  0xA,R30
                 ; 0000 00A9 UCSRC=(1<<URSEL) | (0<<UMSEL) | (1<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000100 eae6      	LDI  R30,LOW(166)
000101 bde0      	OUT  0x20,R30
                 ; 0000 00AA UBRRH=0x00;
000102 e0e0      	LDI  R30,LOW(0)
000103 bde0      	OUT  0x20,R30
                 ; 0000 00AB UBRRL=0x0C;
000104 e0ec      	LDI  R30,LOW(12)
000105 b9e9      	OUT  0x9,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Analog Comparator initialization
                 ; 0000 00AE // Analog Comparator: Off
                 ; 0000 00AF // The Analog Comparator's positive input is
                 ; 0000 00B0 // connected to the AIN0 pin
                 ; 0000 00B1 // The Analog Comparator's negative input is
                 ; 0000 00B2 // connected to the AIN1 pin
                 ; 0000 00B3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000106 e8e0      	LDI  R30,LOW(128)
000107 b9e8      	OUT  0x8,R30
                 ; 0000 00B4 SFIOR=(0<<ACME);
000108 e0e0      	LDI  R30,LOW(0)
000109 bfe0      	OUT  0x30,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // ADC initialization
                 ; 0000 00B7 // ADC disabled
                 ; 0000 00B8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00010a b9e6      	OUT  0x6,R30
                 ; 0000 00B9 
                 ; 0000 00BA // SPI initialization
                 ; 0000 00BB // SPI disabled
                 ; 0000 00BC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00010b b9ed      	OUT  0xD,R30
                 ; 0000 00BD 
                 ; 0000 00BE // TWI initialization
                 ; 0000 00BF // TWI disabled
                 ; 0000 00C0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00010c bfe6      	OUT  0x36,R30
                 ; 0000 00C1 
                 ; 0000 00C2 lcd_init(16);
00010d e1a0      	LDI  R26,LOW(16)
00010e d076      	RCALL _lcd_init
                 ; 0000 00C3     lcd_clear();
00010f d043      	RCALL _lcd_clear
                 ; 0000 00C4     lcd_puts("Start");
                +
000110 e6a0     +LDI R26 , LOW ( _0x14 + ( 0 ) )
000111 e0b2     +LDI R27 , HIGH ( _0x14 + ( 0 ) )
                 	__POINTW2MN _0x14,0
000112 d061      	RCALL _lcd_puts
                 ; 0000 00C5     delay_ms(1000);
000113 eea8      	LDI  R26,LOW(1000)
000114 e0b3      	LDI  R27,HIGH(1000)
000115 940e 01c5 	CALL _delay_ms
                 ; 0000 00C6     lcd_clear();
000117 d03b      	RCALL _lcd_clear
                 ; 0000 00C7 
                 ; 0000 00C8     #asm("sei")
000118 9478      	sei
                 ; 0000 00C9     GICR |= (1 << INT0);
000119 b7eb      	IN   R30,0x3B
00011a 64e0      	ORI  R30,0x40
00011b bfeb      	OUT  0x3B,R30
                 ; 0000 00CA     MCUCR |= (1 << ISC01) | (0 << ISC00);
00011c b7e5      	IN   R30,0x35
00011d 60e2      	ORI  R30,2
00011e bfe5      	OUT  0x35,R30
                 ; 0000 00CB     DDRB=0X0F;
00011f e0ef      	LDI  R30,LOW(15)
000120 bbe7      	OUT  0x17,R30
                 ; 0000 00CC     keypad_port=0XF0;
000121 efe0      	LDI  R30,LOW(240)
000122 bbe8      	OUT  0x18,R30
                 ; 0000 00CD 
                 ; 0000 00CE 
                 ; 0000 00CF while (1)
                 _0x15:
                 ; 0000 00D0       {
                 ; 0000 00D1       // Place your code here
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4       }
000123 cfff      	RJMP _0x15
                 ; 0000 00D5 }
                 _0x18:
000124 cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.DSEG
                 _0x14:
000260           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000125 93aa      	ST   -Y,R26
000126 b3eb      	IN   R30,0x1B
000127 70ef      	ANDI R30,LOW(0xF)
000128 2fae      	MOV  R26,R30
000129 81e8      	LD   R30,Y
00012a 7fe0      	ANDI R30,LOW(0xF0)
00012b 2bea      	OR   R30,R26
00012c bbeb      	OUT  0x1B,R30
                +
00012d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00012e 958a     +DEC R24
00012f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000130 9ada      	SBI  0x1B,2
                +
000131 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000132 958a     +DEC R24
000133 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000134 98da      	CBI  0x1B,2
                +
000135 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000136 958a     +DEC R24
000137 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000138 940c 01b6 	JMP  _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013a 93aa      	ST   -Y,R26
00013b 81a8      	LD   R26,Y
00013c dfe8      	RCALL __lcd_write_nibble_G100
00013d 81e8          ld    r30,y
00013e 95e2          swap  r30
00013f 83e8          st    y,r30
000140 81a8      	LD   R26,Y
000141 dfe3      	RCALL __lcd_write_nibble_G100
                +
000142 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000143 958a     +DEC R24
000144 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000145 c070      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000146 93aa      	ST   -Y,R26
000147 81e8      	LD   R30,Y
000148 e0f0      	LDI  R31,0
000149 58e6      	SUBI R30,LOW(-__base_y_G100)
00014a 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00014b 81e0      	LD   R30,Z
00014c 81a9      	LDD  R26,Y+1
00014d 0fae      	ADD  R26,R30
00014e dfeb      	RCALL __lcd_write_data
00014f 8049      	LDD  R4,Y+1
000150 8078      	LDD  R7,Y+0
000151 9622      	ADIW R28,2
000152 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000153 e0a2      	LDI  R26,LOW(2)
000154 940e 01b8 	CALL SUBOPT_0x0
000156 e0ac      	LDI  R26,LOW(12)
000157 dfe2      	RCALL __lcd_write_data
000158 e0a1      	LDI  R26,LOW(1)
000159 940e 01b8 	CALL SUBOPT_0x0
00015b e0e0      	LDI  R30,LOW(0)
00015c 2e7e      	MOV  R7,R30
00015d 2e4e      	MOV  R4,R30
00015e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00015f 93aa      	ST   -Y,R26
000160 81a8      	LD   R26,Y
000161 30aa      	CPI  R26,LOW(0xA)
000162 f011      	BREQ _0x2000005
000163 1446      	CP   R4,R6
000164 f048      	BRLO _0x2000004
                 _0x2000005:
000165 e0e0      	LDI  R30,LOW(0)
000166 93ea      	ST   -Y,R30
000167 9473      	INC  R7
000168 2da7      	MOV  R26,R7
000169 dfdc      	RCALL _lcd_gotoxy
00016a 81a8      	LD   R26,Y
00016b 30aa      	CPI  R26,LOW(0xA)
00016c f409      	BRNE _0x2000007
00016d c048      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
00016e 9443      	INC  R4
00016f 9ad8      	SBI  0x1B,0
000170 81a8      	LD   R26,Y
000171 dfc8      	RCALL __lcd_write_data
000172 98d8      	CBI  0x1B,0
000173 c042      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000174 93ba      	ST   -Y,R27
000175 93aa      	ST   -Y,R26
000176 931a      	ST   -Y,R17
                 _0x2000008:
000177 81a9      	LDD  R26,Y+1
000178 81ba      	LDD  R27,Y+1+1
000179 91ed      	LD   R30,X+
00017a 83a9      	STD  Y+1,R26
00017b 83ba      	STD  Y+1+1,R27
00017c 2f1e      	MOV  R17,R30
00017d 30e0      	CPI  R30,0
00017e f019      	BREQ _0x200000A
00017f 2fa1      	MOV  R26,R17
000180 dfde      	RCALL _lcd_putchar
000181 cff5      	RJMP _0x2000008
                 _0x200000A:
000182 8118      	LDD  R17,Y+0
000183 9623      	ADIW R28,3
000184 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000185 93aa      	ST   -Y,R26
000186 b3ea      	IN   R30,0x1A
000187 6fe0      	ORI  R30,LOW(0xF0)
000188 bbea      	OUT  0x1A,R30
000189 9ad2      	SBI  0x1A,2
00018a 9ad0      	SBI  0x1A,0
00018b 9ad1      	SBI  0x1A,1
00018c 98da      	CBI  0x1B,2
00018d 98d8      	CBI  0x1B,0
00018e 98d9      	CBI  0x1B,1
00018f 8068      	LDD  R6,Y+0
000190 81e8      	LD   R30,Y
000191 58e0      	SUBI R30,-LOW(128)
                +
000192 93e0 027c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000194 81e8      	LD   R30,Y
000195 54e0      	SUBI R30,-LOW(192)
                +
000196 93e0 027d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000198 e1a4      	LDI  R26,LOW(20)
000199 e0b0      	LDI  R27,0
00019a 940e 01c5 	CALL _delay_ms
00019c 940e 01be 	CALL SUBOPT_0x1
00019e 940e 01be 	CALL SUBOPT_0x1
0001a0 940e 01be 	CALL SUBOPT_0x1
0001a2 e2a0      	LDI  R26,LOW(32)
0001a3 df81      	RCALL __lcd_write_nibble_G100
                +
0001a4 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001a7 e2a8      	LDI  R26,LOW(40)
0001a8 df91      	RCALL __lcd_write_data
0001a9 e0a4      	LDI  R26,LOW(4)
0001aa df8f      	RCALL __lcd_write_data
0001ab e8a5      	LDI  R26,LOW(133)
0001ac df8d      	RCALL __lcd_write_data
0001ad e0a6      	LDI  R26,LOW(6)
0001ae df8b      	RCALL __lcd_write_data
0001af dfa3      	RCALL _lcd_clear
0001b0 c005      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001b1 93aa      	ST   -Y,R26
                 putchar0:
0001b2 9b5d           sbis usr,udre
0001b3 cffe           rjmp putchar0
0001b4 81e8           ld   r30,y
0001b5 b9ec           out  udr,r30
                 _0x2080001:
0001b6 9621      	ADIW R28,1
0001b7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _scan:
000266           	.BYTE 0x4
                 _arrkey:
00026a           	.BYTE 0x10
                 __base_y_G100:
00027a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001b8 940e 013a 	CALL __lcd_write_data
0001ba e0a3      	LDI  R26,LOW(3)
0001bb e0b0      	LDI  R27,0
0001bc 940c 01c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001be e3a0      	LDI  R26,LOW(48)
0001bf 940e 0125 	CALL __lcd_write_nibble_G100
                +
0001c1 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001c2 958a     +DEC R24
0001c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001c4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001c5 9610      	adiw r26,0
0001c6 f039      	breq __delay_ms1
                 __delay_ms0:
0001c7 95a8      	wdr
                +
0001c8 ef8a     +LDI R24 , LOW ( 0xFA )
0001c9 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001ca 9701     +SBIW R24 , 1
0001cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001cc 9711      	sbiw r26,1
0001cd f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ce 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  10 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   7 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   3 r17:  14 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  27 r25:   5 r26:  44 r27:  11 r28:   4 r29:   1 r30: 134 r31:  13 
x  :   4 y  :  59 z  :  13 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   4 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  24 ld    :  32 ldd   :   7 ldi   :  63 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   8 movw  :   7 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   3 out   :  55 pop   :   0 push  :   0 rcall :  18 ret   :   7 
reti  :   1 rjmp  :  14 rol   :   0 ror   :   0 sbc   :   0 sbci  :   6 
sbi   :   5 sbic  :   4 sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :   2 sub   :   0 subi  :   9 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 44 out of 116 (37.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00039e    846     80    926   32768   2.8%
[.dseg] 0x000060 0x00027e      0     30     30    2048   1.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
