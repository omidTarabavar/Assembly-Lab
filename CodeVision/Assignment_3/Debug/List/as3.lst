
AVRASM ver. 2.1.30  D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm Sat Nov 30 20:00:43 2024

D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _pressedKey=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0049 	JMP  __RESET
000002 940c 00ad 	JMP  _my_int
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\Github\Assembly-Lab\CodeVision\Assignment_3\Debug\List\as3.asm(1124): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x3:
00002b fdfe
00002c f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
00002d 3837
00002e 2f39
00002f 3534
000030 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
000031 3231
000032 2d33
000033 3043
000034 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 _0x0:
000035 7453
000036 7261
000037 0074      	.DB  0x53,0x74,0x61,0x72,0x74,0x0
                 _0x2000003:
000038 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000039 0001      	.DW  0x01
00003a 0005      	.DW  0x05
00003b 0054      	.DW  __REG_VARS*2
                 
00003c 0004      	.DW  0x04
00003d 0266      	.DW  _scan
00003e 0056      	.DW  _0x3*2
                 
00003f 0010      	.DW  0x10
000040 026a      	.DW  _arrkey
000041 005a      	.DW  _0x4*2
                 
000042 0006      	.DW  0x06
000043 0260      	.DW  _0xF
000044 006a      	.DW  _0x0*2
                 
000045 0002      	.DW  0x02
000046 027a      	.DW  __base_y_G100
000047 0070      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000048 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000049 94f8      	CLI
00004a 27ee      	CLR  R30
00004b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004c e0f1      	LDI  R31,1
00004d bffb      	OUT  GICR,R31
00004e bfeb      	OUT  GICR,R30
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000059 93ed      	ST   X+,R30
00005a 9701      	SBIW R24,1
00005b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005c e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005e 9185      	LPM  R24,Z+
00005f 9195      	LPM  R25,Z+
000060 9700      	SBIW R24,0
000061 f061      	BREQ __GLOBAL_INI_END
000062 91a5      	LPM  R26,Z+
000063 91b5      	LPM  R27,Z+
000064 9005      	LPM  R0,Z+
000065 9015      	LPM  R1,Z+
000066 01bf      	MOVW R22,R30
000067 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000068 9005      	LPM  R0,Z+
000069 920d      	ST   X+,R0
00006a 9701      	SBIW R24,1
00006b f7e1      	BRNE __GLOBAL_INI_LOOP
00006c 01fb      	MOVW R30,R22
00006d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 00d9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; * as3.c
                 ; *
                 ; * Created: 11/23/2024 5:44:19 PM
                 ; * Author: omidt
                 ; */
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned char scan[4] = {0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;char pressedKey = 0;
                 ;char arrkey[16] = {
                 ;    '7', '8', '9', '/',
                 ;    '4', '5', '6', '*',
                 ;    '1', '2', '3', '-',
                 ;    'C', '0', '=', '+'
                 ;};
                 ;#define c1 PINB.4
                 ;#define c2 PINB.5
                 ;#define c3 PINB.6
                 ;#define c4 PINB.7
                 ;#define keypad_port PORTB
                 ;
                 ;void keypad()
                 ; 0000 001A {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 001B     unsigned char r,c;
                 ; 0000 001C     delay_us(10);
000076 931a      	ST   -Y,R17
000077 930a      	ST   -Y,R16
                 ;	r -> R17
                 ;	c -> R16
                +
000078 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000079 958a     +DEC R24
00007a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 001D     for (r=0; r<4; r++){
00007b e010      	LDI  R17,LOW(0)
                 _0x6:
00007c 3014      	CPI  R17,4
00007d f560      	BRSH _0x7
                 ; 0000 001E             c=255;
00007e ef0f      	LDI  R16,LOW(255)
                 ; 0000 001F             keypad_port=scan[r];
00007f 2fe1      	MOV  R30,R17
000080 e0f0      	LDI  R31,0
000081 59ea      	SUBI R30,LOW(-_scan)
000082 4ffd      	SBCI R31,HIGH(-_scan)
000083 81e0      	LD   R30,Z
000084 bbe8      	OUT  0x18,R30
                 ; 0000 0020             delay_us(10);
                +
000085 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000086 958a     +DEC R24
000087 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0021             if(c1==0) pressedKey=arrkey[(r*4)+0];
000088 99b4      	SBIC 0x16,4
000089 c006      	RJMP _0x8
00008a e0e4      	LDI  R30,LOW(4)
00008b 9fe1      	MUL  R30,R17
00008c 01f0      	MOVW R30,R0
                +
00008d 59e6     +SUBI R30 , LOW ( - _arrkey - ( 0 ) )
00008e 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 0 ) )
                 	__ADDW1MN _arrkey,0
00008f 8050      	LD   R5,Z
                 ; 0000 0022             if(c2==0) pressedKey=arrkey[(r*4)+1];
                 _0x8:
000090 99b5      	SBIC 0x16,5
000091 c006      	RJMP _0x9
000092 e0e4      	LDI  R30,LOW(4)
000093 9fe1      	MUL  R30,R17
000094 01f0      	MOVW R30,R0
                +
000095 59e5     +SUBI R30 , LOW ( - _arrkey - ( 1 ) )
000096 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 1 ) )
                 	__ADDW1MN _arrkey,1
000097 8050      	LD   R5,Z
                 ; 0000 0023             if(c3==0) pressedKey=arrkey[(r*4)+2];
                 _0x9:
000098 99b6      	SBIC 0x16,6
000099 c006      	RJMP _0xA
00009a e0e4      	LDI  R30,LOW(4)
00009b 9fe1      	MUL  R30,R17
00009c 01f0      	MOVW R30,R0
                +
00009d 59e4     +SUBI R30 , LOW ( - _arrkey - ( 2 ) )
00009e 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 2 ) )
                 	__ADDW1MN _arrkey,2
00009f 8050      	LD   R5,Z
                 ; 0000 0024             if(c4==0) pressedKey=arrkey[(r*4)+3];
                 _0xA:
0000a0 99b7      	SBIC 0x16,7
0000a1 c006      	RJMP _0xB
0000a2 e0e4      	LDI  R30,LOW(4)
0000a3 9fe1      	MUL  R30,R17
0000a4 01f0      	MOVW R30,R0
                +
0000a5 59e3     +SUBI R30 , LOW ( - _arrkey - ( 3 ) )
0000a6 4ffd     +SBCI R31 , HIGH ( - _arrkey - ( 3 ) )
                 	__ADDW1MN _arrkey,3
0000a7 8050      	LD   R5,Z
                 ; 0000 0025     }
                 _0xB:
0000a8 5f1f      	SUBI R17,-1
0000a9 cfd2      	RJMP _0x6
                 _0x7:
                 ; 0000 0026 }
0000aa 9109      	LD   R16,Y+
0000ab 9119      	LD   R17,Y+
0000ac 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [2] void my_int()
                 ; 0000 0029 {
                 _my_int:
                 ; .FSTART _my_int
0000ad 920a      	ST   -Y,R0
0000ae 921a      	ST   -Y,R1
0000af 92fa      	ST   -Y,R15
0000b0 936a      	ST   -Y,R22
0000b1 937a      	ST   -Y,R23
0000b2 938a      	ST   -Y,R24
0000b3 939a      	ST   -Y,R25
0000b4 93aa      	ST   -Y,R26
0000b5 93ba      	ST   -Y,R27
0000b6 93ea      	ST   -Y,R30
0000b7 93fa      	ST   -Y,R31
0000b8 b7ef      	IN   R30,SREG
0000b9 93ea      	ST   -Y,R30
                 ; 0000 002A     #asm("cli")
0000ba 94f8      	cli
                 ; 0000 002B     keypad();
0000bb dfba      	RCALL _keypad
                 ; 0000 002C     DDRB=0X0F;
0000bc e0ef      	LDI  R30,LOW(15)
0000bd bbe7      	OUT  0x17,R30
                 ; 0000 002D     keypad_port=0XF0;
0000be efe0      	LDI  R30,LOW(240)
0000bf bbe8      	OUT  0x18,R30
                 ; 0000 002E     if(pressedKey != 0)
0000c0 2055      	TST  R5
0000c1 f041      	BREQ _0xC
                 ; 0000 002F     {
                 ; 0000 0030         if (pressedKey == 'C') lcd_clear();
0000c2 e4e3      	LDI  R30,LOW(67)
0000c3 15e5      	CP   R30,R5
0000c4 f411      	BRNE _0xD
0000c5 d058      	RCALL _lcd_clear
                 ; 0000 0031         else lcd_putchar(pressedKey);
0000c6 c002      	RJMP _0xE
                 _0xD:
0000c7 2da5      	MOV  R26,R5
0000c8 d05f      	RCALL _lcd_putchar
                 ; 0000 0032         pressedKey = 0;
                 _0xE:
0000c9 2455      	CLR  R5
                 ; 0000 0033     }
                 ; 0000 0034 
                 ; 0000 0035     #asm ("sei")
                 _0xC:
0000ca 9478      	sei
                 ; 0000 0036 }
0000cb 91e9      	LD   R30,Y+
0000cc bfef      	OUT  SREG,R30
0000cd 91f9      	LD   R31,Y+
0000ce 91e9      	LD   R30,Y+
0000cf 91b9      	LD   R27,Y+
0000d0 91a9      	LD   R26,Y+
0000d1 9199      	LD   R25,Y+
0000d2 9189      	LD   R24,Y+
0000d3 9179      	LD   R23,Y+
0000d4 9169      	LD   R22,Y+
0000d5 90f9      	LD   R15,Y+
0000d6 9019      	LD   R1,Y+
0000d7 9009      	LD   R0,Y+
0000d8 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A     lcd_init(16);
0000d9 e1a0      	LDI  R26,LOW(16)
0000da d073      	RCALL _lcd_init
                 ; 0000 003B     lcd_clear();
0000db d042      	RCALL _lcd_clear
                 ; 0000 003C     lcd_puts("Start");
                +
0000dc e6a0     +LDI R26 , LOW ( _0xF + ( 0 ) )
0000dd e0b2     +LDI R27 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW2MN _0xF,0
0000de d05e      	RCALL _lcd_puts
                 ; 0000 003D     delay_ms(1000);
0000df eea8      	LDI  R26,LOW(1000)
0000e0 e0b3      	LDI  R27,HIGH(1000)
0000e1 940e 0183 	CALL _delay_ms
                 ; 0000 003E     lcd_clear();
0000e3 d03a      	RCALL _lcd_clear
                 ; 0000 003F 
                 ; 0000 0040     #asm("sei")
0000e4 9478      	sei
                 ; 0000 0041     GICR |= (1 << INT0);
0000e5 b7eb      	IN   R30,0x3B
0000e6 64e0      	ORI  R30,0x40
0000e7 bfeb      	OUT  0x3B,R30
                 ; 0000 0042     MCUCR |= (1 << ISC01) | (0 << ISC00);
0000e8 b7e5      	IN   R30,0x35
0000e9 60e2      	ORI  R30,2
0000ea bfe5      	OUT  0x35,R30
                 ; 0000 0043     DDRB=0X0F;
0000eb e0ef      	LDI  R30,LOW(15)
0000ec bbe7      	OUT  0x17,R30
                 ; 0000 0044     keypad_port=0XF0;
0000ed efe0      	LDI  R30,LOW(240)
0000ee bbe8      	OUT  0x18,R30
                 ; 0000 0045     while (1) {
                 _0x10:
                 ; 0000 0046 
                 ; 0000 0047     }
0000ef cfff      	RJMP _0x10
                 ; 0000 0048 }
                 _0x13:
0000f0 cfff      	RJMP _0x13
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000260           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f1 93aa      	ST   -Y,R26
0000f2 b3eb      	IN   R30,0x1B
0000f3 70ef      	ANDI R30,LOW(0xF)
0000f4 2fae      	MOV  R26,R30
0000f5 81e8      	LD   R30,Y
0000f6 7fe0      	ANDI R30,LOW(0xF0)
0000f7 2bea      	OR   R30,R26
0000f8 bbeb      	OUT  0x1B,R30
                +
0000f9 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fa 958a     +DEC R24
0000fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fc 9ada      	SBI  0x1B,2
                +
0000fd e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fe 958a     +DEC R24
0000ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000100 98da      	CBI  0x1B,2
                +
000101 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000102 958a     +DEC R24
000103 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000104 c071      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000105 93aa      	ST   -Y,R26
000106 81a8      	LD   R26,Y
000107 dfe9      	RCALL __lcd_write_nibble_G100
000108 81e8          ld    r30,y
000109 95e2          swap  r30
00010a 83e8          st    y,r30
00010b 81a8      	LD   R26,Y
00010c dfe4      	RCALL __lcd_write_nibble_G100
                +
00010d e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00010e 958a     +DEC R24
00010f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000110 c065      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000111 93aa      	ST   -Y,R26
000112 81e8      	LD   R30,Y
000113 e0f0      	LDI  R31,0
000114 58e6      	SUBI R30,LOW(-__base_y_G100)
000115 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000116 81e0      	LD   R30,Z
000117 81a9      	LDD  R26,Y+1
000118 0fae      	ADD  R26,R30
000119 dfeb      	RCALL __lcd_write_data
00011a 8049      	LDD  R4,Y+1
00011b 8078      	LDD  R7,Y+0
00011c 9622      	ADIW R28,2
00011d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011e e0a2      	LDI  R26,LOW(2)
00011f d058      	RCALL SUBOPT_0x0
000120 e0ac      	LDI  R26,LOW(12)
000121 dfe3      	RCALL __lcd_write_data
000122 e0a1      	LDI  R26,LOW(1)
000123 d054      	RCALL SUBOPT_0x0
000124 e0e0      	LDI  R30,LOW(0)
000125 2e7e      	MOV  R7,R30
000126 2e4e      	MOV  R4,R30
000127 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000128 93aa      	ST   -Y,R26
000129 81a8      	LD   R26,Y
00012a 30aa      	CPI  R26,LOW(0xA)
00012b f011      	BREQ _0x2000005
00012c 1446      	CP   R4,R6
00012d f048      	BRLO _0x2000004
                 _0x2000005:
00012e e0e0      	LDI  R30,LOW(0)
00012f 93ea      	ST   -Y,R30
000130 9473      	INC  R7
000131 2da7      	MOV  R26,R7
000132 dfde      	RCALL _lcd_gotoxy
000133 81a8      	LD   R26,Y
000134 30aa      	CPI  R26,LOW(0xA)
000135 f409      	BRNE _0x2000007
000136 c03f      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000137 9443      	INC  R4
000138 9ad8      	SBI  0x1B,0
000139 81a8      	LD   R26,Y
00013a dfca      	RCALL __lcd_write_data
00013b 98d8      	CBI  0x1B,0
00013c c039      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013d 93ba      	ST   -Y,R27
00013e 93aa      	ST   -Y,R26
00013f 931a      	ST   -Y,R17
                 _0x2000008:
000140 81a9      	LDD  R26,Y+1
000141 81ba      	LDD  R27,Y+1+1
000142 91ed      	LD   R30,X+
000143 83a9      	STD  Y+1,R26
000144 83ba      	STD  Y+1+1,R27
000145 2f1e      	MOV  R17,R30
000146 30e0      	CPI  R30,0
000147 f019      	BREQ _0x200000A
000148 2fa1      	MOV  R26,R17
000149 dfde      	RCALL _lcd_putchar
00014a cff5      	RJMP _0x2000008
                 _0x200000A:
00014b 8118      	LDD  R17,Y+0
00014c 9623      	ADIW R28,3
00014d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014e 93aa      	ST   -Y,R26
00014f b3ea      	IN   R30,0x1A
000150 6fe0      	ORI  R30,LOW(0xF0)
000151 bbea      	OUT  0x1A,R30
000152 9ad2      	SBI  0x1A,2
000153 9ad0      	SBI  0x1A,0
000154 9ad1      	SBI  0x1A,1
000155 98da      	CBI  0x1B,2
000156 98d8      	CBI  0x1B,0
000157 98d9      	CBI  0x1B,1
000158 8068      	LDD  R6,Y+0
000159 81e8      	LD   R30,Y
00015a 58e0      	SUBI R30,-LOW(128)
                +
00015b 93e0 027c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015d 81e8      	LD   R30,Y
00015e 54e0      	SUBI R30,-LOW(192)
                +
00015f 93e0 027d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000161 e1a4      	LDI  R26,LOW(20)
000162 e0b0      	LDI  R27,0
000163 940e 0183 	CALL _delay_ms
000165 d017      	RCALL SUBOPT_0x1
000166 d016      	RCALL SUBOPT_0x1
000167 d015      	RCALL SUBOPT_0x1
000168 e2a0      	LDI  R26,LOW(32)
000169 df87      	RCALL __lcd_write_nibble_G100
                +
00016a e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00016b 958a     +DEC R24
00016c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00016d e2a8      	LDI  R26,LOW(40)
00016e df96      	RCALL __lcd_write_data
00016f e0a4      	LDI  R26,LOW(4)
000170 df94      	RCALL __lcd_write_data
000171 e8a5      	LDI  R26,LOW(133)
000172 df92      	RCALL __lcd_write_data
000173 e0a6      	LDI  R26,LOW(6)
000174 df90      	RCALL __lcd_write_data
000175 dfa8      	RCALL _lcd_clear
                 _0x2020001:
000176 9621      	ADIW R28,1
000177 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _scan:
000266           	.BYTE 0x4
                 _arrkey:
00026a           	.BYTE 0x10
                 __base_y_G100:
00027a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000178 df8c      	RCALL __lcd_write_data
000179 e0a3      	LDI  R26,LOW(3)
00017a e0b0      	LDI  R27,0
00017b 940c 0183 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00017d e3a0      	LDI  R26,LOW(48)
00017e df72      	RCALL __lcd_write_nibble_G100
                +
00017f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000180 958a     +DEC R24
000181 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000182 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000183 9610      	adiw r26,0
000184 f039      	breq __delay_ms1
                 __delay_ms0:
000185 95a8      	wdr
                +
000186 ef8a     +LDI R24 , LOW ( 0xFA )
000187 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000188 9701     +SBIW R24 , 1
000189 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00018a 9711      	sbiw r26,1
00018b f7c9      	brne __delay_ms0
                 __delay_ms1:
00018c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  10 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   8 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   3 r17:  14 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  27 r25:   5 r26:  43 r27:  11 r28:   4 r29:   1 r30:  87 r31:  13 
x  :   4 y  :  57 z  :  13 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   0 cpi   :   4 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  31 ldd   :   7 ldi   :  55 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   8 movw  :   7 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   3 out   :  16 pop   :   0 push  :   0 rcall :  27 ret   :   7 
reti  :   1 rjmp  :  14 rol   :   0 ror   :   0 sbc   :   0 sbci  :   6 
sbi   :   5 sbic  :   4 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   2 sts   :   2 sub   :   0 subi  :   9 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031a    732     62    794   32768   2.4%
[.dseg] 0x000060 0x00027e      0     30     30    2048   1.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
